//
//  Author: Vlad Seryakov vseryakov@gmail.com
//  backendjs 2018
//

const fs = require("fs");
const core = require(__dirname + '/core');
const lib = require(__dirname + '/lib');
const db = require(__dirname + '/db');
const api = require(__dirname + '/api');
const util = require("util");

const mod = {
    name: "auth",
    args: [
        { name: "table", descr: "Table to use for user accounts" },
        { name: "err-(.+)", descr: "Error messages for various cases" },
        { name: "admin-roles", type: "list", descr: "List of special super admin roles" },
        { name: "sigversion", type: "int", descr: "Signature version for secrets" },
        { name: "hash", descr: "Hashing method to use by default: bcrypt, argon2, none" },
        { name: "bcrypt", type: "int", min: 12, descr: "Number of iterations for bcrypt" },
        { name: "argon2", type: "map", maptype: "auto", nocamel: 1, descr: "Argon2 parameteres, ex: type:2,memoryCost:1,hashLength:32" },
        { name: "max-length", type: "int", descr: "Max login and name length" },
        { name: "users", type: "json", logger: "error", descr: "An object with users" },
        { name: "users-file", descr: "A JSON file with a list of users" },
    ],
    table: "bk_user",
    sigversion: -1,
    hash: "bcrypt",
    bcrypt: 12,
    argon2: {},
    maxLength: 140,
    users: {},
    adminRoles: ["root", "admin"],

    errInvalidSecret: "Invalid user name or password",
    errInvalidUser: "The username is required",
    errInvalidPasswd: "The password is required",
    errInvalidName: "The name is required",
    errInvalidParams: "No username or id provided",
    errInvalidId: "Invalid id provided",
    errInvalidLogin: "No username or password provided",
};
module.exports = mod;

mod.configure = function(options, callback)
{
    this.tables = {
        [this.table]: {
            login: { primary: 1, max: mod.maxLength },                   // Account login/username
            id: { type: "uuid", prefix: "u_", unique: 1 },               // Autogenerated ID
            name: { type: "text", max: mod.maxLength },                  // Account name
            status: { type: "text", max: mod.maxLength },                // Status of the account
            secret: { priv: 1, max: mod.maxLength },                     // Signature secret or password
            type: { type: "list", list: 1, lower: 1, internal: 1 },      // Account roles: admin, ....
            flags: { type: "list", list: 1, max: mod.maxLength },        // Tags/flags about the account
            expires: { type: "bigint", internal: 1, priv: 1 },           // Deny access to the account if this value is before current date, ms
            ctime: { type: "now", readonly: 1 },                         // Create time
            mtime: { type: "now" },                                      // Modified time
        },
    };

    this.loadUsers((err) => {
        if (err) return;
        fs.watch(this.usersFile, () => {
            core.setTimeout(this.usersFile, () => { this.loadUsers() }, lib.randomInt(1000, 5000));
        });
    });

    callback();
}

mod.configureWeb = function(options, callback)
{
    // Authentication check without accounts module
    api.app.post("/auth", (req, res) => {
        if (!req.account || !req.account.id) {
            return api.sendReply(res, { status: 417, message: mod.errInvalidLogin, code: "NOLOGIN" });
        }
        api.handleSessionSignature(req, () => {
            req.options.cleanup = mod.table;
            req.options.cleanup_strict = 1;
            api.sendJSON(req, null, req.account);
        });
    });

    // Login with just the secret without signature
    api.app.post("/login", (req, res) => {
        if (!req.query.login || !req.query.secret) {
            return api.sendReply(res, { status: 417, message: mod.errInvalidLogin, code: "NOLOGIN" });
        }
        // Create internal signature from the login data
        req.signature = api.newSignature(req, "version", mod.sigversion, "source", "l", "login", req.query.login, "secret", req.query.secret);
        delete req.query.login;
        delete req.query.secret;
        api.checkRequestSignature(req, (err) => {
            if (!req.account || !req.account.id) {
                return api.sendJSON(req, err || { status: 417, message: mod.errInvalidLogin, code: "NOLOGIN" });
            }
            api.handleSessionSignature(req, () => {
                req.options.cleanup = mod.table;
                req.options.cleanup_strict = 1;
                api.sendJSON(req, null, req.account);
            });
        });
    });

    // Clear sessions and access tokens
    api.app.post("/logout", (req, res) => {
        api.handleLogout(req);
        api.sendJSON(req);
    });

    callback();
}

// Returns an account record by login or id, to make use of a cache add to the config `db-cache-keys-bk_user-id=id`
mod.get = function(query, options, callback)
{
    if (typeof options == "function") callback = options, options = null;
    if (typeof query == "string") {
        query = { [lib.isUuid(query) ? "id" : "login"]: query };
    }
    if (query.login) {
        var user = this.users[query.login];
        if (user) return callback(null, user);
        db.get(this.table, query, callback);
    } else
    if (query.id) {
        for (const p in this.users) {
            if (this.users[p].id == query.id) return callback(null, this.users[p]);
        }
        var opts = { noscan: 1, cacheKeyName: "id", ops: { id: "eq" }, count: 1, first: 1 };
        db.select(this.table, { id: query.id }, opts, (err, row, info) => {
            if (!row) return callback(err);
            // For databases that do not support all columns with indexes(DynamoDB) we have to re-read by the primary key
            if (row.name && row.mtime) return callback(null, row, info);
            db.get(this.table, { login: row.login }, callback);
        });
    } else {
        callback();
    }
}
mod.aget = util.promisify(mod.get.bind(mod));

// Registers a new account, returns new record in the callback, when `options.isInternal` is true then allow to set all properties
// otherwise internal properties will not be added
mod.add = function(query, options, callback)
{
    if (typeof options == "function") callback = options, options = null;
    if (!query.login) return lib.tryCall(callback, { status: 400, message: this.errInvalidUser });
    if (!query.secret) return lib.tryCall(callback, { status: 400, message: this.errInvalidPasswd });
    if (!query.name) return lib.tryCall(callback, { status: 400, message: this.errInvalidName });
    options = lib.objClone(options, "result_obj", 1, "first", 1);
    this.prepareSecret(query, options, (err) => {
        if (err) return lib.tryCall(callback, err);
        if (!(options.isInternal || api.checkAccountType(options.account, this.adminRoles))) {
            api.clearQuery(this.table, query, "internal");
        }
        delete query.id;
        db.add(this.table, query, options, (err, row, info) => {
            if (!err) {
                for (const p in row) query[p] = row[p];
            }
            lib.tryCall(callback, err, query, info);
        });
    });
}
mod.aadd = util.promisify(mod.add.bind(mod));

// Updates an existing account by login or id, if `options.isInternal` is true then allow to update all properties, returns a new record in the callback
mod.update = function(query, options, callback)
{
    if (typeof options == "function") callback = options, options = null;
    options = lib.objClone(options, "returning", "*", "first", 1);
    this.prepareSecret(query, options, (err) => {
        if (err) return lib.tryCall(callback, err);
        if (!(options.isInternal || api.checkAccountType(options.account, this.adminRoles))) {
            api.clearQuery(this.table, query, "internal");
            if (query.login) delete query.id;
        }
        if (!query.name) delete query.name;
        if (!this.isUid(query.id)) delete query.id;
        if (query.login) {
            db.update(this.table, query, options, callback);
        } else
        if (query.id) {
            db.select(this.table, { id: query.id }, { cacheKeyName: "id", count: 1, first: 1 }, (err, row) => {
                if (!row) return callback(err, { status: 404, message: this.errInvalidId });
                query.login = row.login;
                db.update(this.table, query, options, callback);
            });
        } else {
            lib.tryCall(callback, { status: 400, message: this.errInvalidParams });
        }
    });
}
mod.aupdate = util.promisify(mod.update.bind(mod));

// Deletes an existing account by login or id, no admin checks, returns the old record in the callback
mod.del = function(query, options, callback)
{
    if (typeof options == "function") callback = options, options = null;
    if (typeof query == "string") {
        query = { [this.isUid(query) ? "id" : "login"]: query };
    }
    options = lib.objClone(options, "returning", "old", "first", 1);
    if (query.login) {
        db.del(this.table, query, options, callback);
    } else
    if (query.id) {
        db.select(this.table, { id: query.id }, { cacheKeyName: "id", count: 1, first: 1 }, (err, row) => {
            if (!row) return callback(err, { status: 404, message: this.errInvalidId });
            query.login = row.login;
            db.del(this.table, query, options, callback);
        });
    } else {
        lib.tryCall(callback, { status: 400, message: this.errInvalidParams });
    }
}
mod.adel = util.promisify(mod.del.bind(mod));

require(__dirname + "/auth/utils")

