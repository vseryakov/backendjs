#!/bin/sh
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#

BKJS=bkjs

PLATFORM=$(uname -s)
case "$PLATFORM" in
  Linux)
    OS_NAME=$(grep -s PRETTY_NAME /etc/os-release)
    case "$OS_NAME" in
     *Amazon*)
       OS_TYPE=amazon
       ;;

     *Alpine*)
       OS_TYPE=alpine
       ;;
    esac
    [ -f /etc/conf.d/$BKJS ] && . /etc/conf.d/$BKJS
    [ -f /etc/sysconfig/$BKJS ] && . /etc/sysconfig/$BKJS
    SED="sed -r -i"
    ;;

  Darwin)
    OS_TYPE=macosx
    [ -z "$BKJS_HOME" ] && export BKJS_HOME=~/.bkjs
    SED="sed -E -i .orig"
    ;;
esac

case "$(uname -m)" in
  aarch64|arm64)
    OS_ARCH=arm64
    ;;
  *)
    OS_ARCH=amd64
    ;;
esac

# There are special commands that can be used as the script name
NAME=$(basename $0)
if [ "${NAME:0:2}" = "bk" -a "$NAME" != $BKJS ]; then
   BKJS_CMD=$NAME
else
   BKJS_CMD=$1
   shift
fi

# Find our real location
unset CDPATH
BKJS_BIN="$(readlink -f $0)"
BKJS_DIR="$(cd "${BKJS_BIN%/*}" ; pwd -P)"

# Command namespace
BKJS_SPACE=$(echo "$BKJS_CMD"|cut -d- -f1)

# Word splitting like in sh
[ -n "$ZSH_VERSION" ] && setopt shwordsplit

# Save all cmdline args
BKJS_ARGC=0
for arg in "$@"; do
    eval "BKJS_ARGV$BKJS_ARGC=\$arg"
    BKJS_ARGC=$((BKJS_ARGC + 1))
done

# Returns an argument value by name, format is -name value
get_arg() {
  local i=0
  while [ $i -lt $BKJS_ARGC ]; do
    local n=$(eval "echo \$BKJS_ARGV$i")
    local v=$(eval "echo \"\$BKJS_ARGV$((i+1))\"")
    if [ "$1" = "$n" ]; then
        if [ -n "$v" ] && ! match "$v" "^\-"; then echo "$v" && return 0; fi
        [ -n "$3" ] && echo "$3" && return 0
    fi
    i=$((i + 1))
  done
  echo "$2"
}

# Returns 1 if an argument exists or the value is 0,1
get_flag() {
  echo $(get_arg $1 "$2" 1)
}

# Returns all commandline arguments not present in the first arg
get_all_args() {
  local i=0 sep=${2:-"\""}
  while [ $i -lt $BKJS_ARGC ]; do
    local found=""
    local n=$(eval "echo \$BKJS_ARGV$i")
    local v=$(eval "echo \"\$BKJS_ARGV$((i+1))\"")
    for a in $1; do
      [ "$n" = "$a" ] && found=1
    done
    if [ -z "$found" ]; then
       if ! match "$n" "[ '\"]"; then
          args="$args $n"
       else
          args="$args $sep$n$sep"
       fi
       if [ -n "$v" -a "${v:0:1}" != "-" ]; then
          if ! match "$v" "[ '\"]"; then
             args="$args $v"
          else
             args="$args $sep$v$sep"
          fi
       fi
    fi
    i=$((i + 1))
    [ "${v:0:1}" != "-" ] && i=$((i + 1))
  done
  echo "$args"
}

# Concatenate args
concat_arg() {
  local _v=$(get_arg $1)
  [ -z "$_v" ] && echo $2
  [ -n "$2" ] && _v="$2 $_v"
  echo "$_v"
}

# Return 1 if 1st arg matches regexp in 2nd arg
match() {
  if [[ -n "$1" && -n "$2" ]] && echo "$1" | egrep -E -q "$2"; then return 0; fi
  return 1
}

# Local IP address, not localhost
get_local_ip() {
  echo $(/sbin/ifconfig eth${1:-0}|grep -o -E '(inet [0-9.]+|inet addr:[0-9.]+)'|tr : ' '|awk '{print $NF}')
}

# Return the value for a property from a json file: get_json file.json name fallback realpath VAR
get_json() {
  node -e "try{o=JSON.parse(fs.readFileSync('$1'));v=o.$2||o['$3'];if(Array.isArray(v)){if('$4'.includes('realpath'))v=v.map(x=>(!x.includes('@')&&fs.realpathSync(x)||x));v=v.join(' ')};if(v&&typeof v=='object')v=Object.keys(v).join(' ');if(typeof v!='undefined')console.log(v)}catch(e){if('$BKJS_DEBUG')console.error('get_json:','$1','$2',e);process.exit(1)}"
}

# Same as get_json but object properties are flattened first to support property names with spaces or dashes
get_json_flat() {
  node -e "function f(o){var r={};for(var p in o){if(!Array.isArray(o[p])&&typeof o[p]=='object'){var a=f(o[p]);r[p]=Object.keys(o[p]);for(var x in a)r[p+'.'+x]=a[x]}else r[p]=o[p]};return r};try{o=f(JSON.parse(fs.readFileSync('$1')));v=o['$2']||o['$3'];if(Array.isArray(v)){if('$4'.includes('realpath'))v=v.map(x=>(!x.includes('@')&&fs.realpathSync(x)||x));v=v.join(' ')};if(v&&typeof v=='object')v=Object.keys(v).join(' ');if(typeof v!='undefined')console.log(v)}catch(e){if('$BKJS_DEBUG')console.error('get_json_flat:','$1','$2',e);process.exit(1)}"
}

# Use configured or provided user:group, defaults to the current user
find_user() {
  export BKJS_USER=$(get_arg -user $BKJS_USER)
  [ -z "$BKJS_USER" ] && export BKJS_USER=$(whoami)
  export BKJS_GROUP=$(get_arg -group $BKJS_GROUP)
  [ -z "$BKJS_GROUP" ] && export BKJS_GROUP=$(id -gn)
}

# Run the command by sourcing all scripts from tools folders
process_cmd() {
  local _cmddir= _cmdscope= _cmdtools="$(get_arg -tools) ./tools $BKJS_TOOLS $BKJS_HOME/tools $BKJS_DIR/tools"
  [ -n "$BKJS_ALLCMD" ] && _cmdscope='bkjs-*' || _cmdscope="bkjs-$BKJS_SPACE*"
  [ -n "$BKJS_DEBUG" ] && echo "$(date): $PPID: $BKJS_CMD: process_cmd: $_cmdscope: tools: $_cmdtools"
  for _cmddir in $_cmdtools; do
     if [ -d $_cmddir ]; then
        local _cmdfiles=$(find $_cmddir \( -type f -o -type l \) -name "$_cmdscope")
        [ -n "$BKJS_DEBUG" ] && echo "$(date): $PPID: $BKJS_CMD: process_cmd: $_cmddir: files: $_cmdfiles"
        for _cmdfile in $_cmdfiles; do
            source $_cmdfile
        done
     fi
  done
}

# Utility functions
to_lower() {
  echo $1 | tr [:upper:] [:lower:]
}
to_upper() {
  echo $1 | tr [:lower:] [:upper:]
}

# Start trace as soon as possible
trace=$(get_arg -trace $BKJS_TRACE)
[ -n "$trace" ] && exec >>$trace 2>&1

# Home and prefix must be specified for the script to work properly
export BKJS_HOME=$(get_arg -home $BKJS_HOME)
[ -z "$BKJS_HOME" ] && export BKJS_HOME=$(sh -c "echo ~$BKJS_USER")

# Load user profiles
[ -f $BKJS_HOME/.env ] && . $BKJS_HOME/.env
[ -f $BKJS_HOME/etc/profile ] && . $BKJS_HOME/etc/profile
[ -f $BKJS_HOME/etc/profile.local ] && . $BKJS_HOME/etc/profile.local

export BKJS_DEBUG=$(get_flag -debug)
[ -n "$BKJS_DEBUG" ] && echo "$(date): $PPID: $BKJS_BIN: HOME=$BKJS_HOME, PWD=$(pwd), USER=$(whoami), CMD=$BKJS_CMD, ARGS=$@"

# Setup paths
export PATH=$BKJS_HOME/bin:$BKJS_HOME/node_modules/.bin:/app/bin:/usr/local/bin:/opt/local/bin:/sbin:/usr/sbin:$PATH

case "$BKJS_CMD" in

  start)
    cd $BKJS_HOME
    [ "$(whoami)" = "root" ] && ($0 start-instance $(get_all_args))
    [ -n "$BKJS_SERVER" -a "$BKJS_SERVER" != "none" ] && $0 run-$BKJS_SERVER
    exit 0
    ;;

  start-instance)
    echo "$(date -R): $PPID: Running start instance..."

    # Allow other tools to run
    BKJS_ALLCMD=1
    process_cmd

    # New instance started from existing AMI which might have old log files
    if [ -f $BKJS_HOME/var/bkjs.init ]; then
        echo "$(date): $PPID: Initializing $BKJS_HOME..."
        rm -rf $BKJS_HOME/var/* $BKJS_HOME/log/*
        service rsyslog restart
    fi
    find_user
    chown -R $BKJS_USER $BKJS_HOME/etc $BKJS_HOME/var $BKJS_HOME/log
    exit 0
    ;;

  stop)
    pkill $1 -f "$BKJS:"
    sleep 1
    pkill $1 -f "$BKJS:"
    exit 0
    ;;

  restart-api|stop-api)
    pkill -USR2 -f "$BKJS: server"
    pkill -USR2 -f "$BKJS: master"
    exit 0
    ;;

  stop-web|stop-server|stop-master|stop-worker)
    name=${BKJS_CMD:5}
    [ -z "$name" ] && exit 0
    pkill $1 -f "$BKJS: $name"
    exit 0
    ;;

  run|run-master|master|run-monitor|monitor|run-web|web|watch|shell|bksh|run-none|none)
    [ -f app.js ] && SCRIPT=app.js
    [ -z "$SCRIPT" -a -f lib/app.js ] && SCRIPT=lib/app.js
    [ -z "$SCRIPT" -a -f $BKJS_HOME/app.js ] && SCRIPT=$BKJS_HOME/app.js
    [ -z "$SCRIPT" -a -f $BKJS_HOME/lib/app.js ] && SCRIPT=$BKJS_HOME/lib/app.js
    [ -z "$SCRIPT" ] && SCRIPT=$BKJS_DIR/lib/run.js

    [ -n "$BKJS_DEBUG" ] && echo "$(date): $PPID: Starting $BKJS_CMD: $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_RUN_ARGS $@"

    case "$BKJS_CMD" in
     run-none|none)
        ;;

     run-monitor|monitor)
        exec node $NODE_ARGS $SCRIPT -home $BKJS_HOME -syslog -daemon -monitor -master $BKJS_RUN_ARGS "$@"
        ;;

     run-master|master)
        exec node $NODE_ARGS $SCRIPT -home $BKJS_HOME -syslog -daemon -master $BKJS_RUN_ARGS "$@"
        ;;

     watch)
        exec node $NODE_ARGS $SCRIPT -home $BKJS_HOME -master -watch $BKJS_RUN_ARGS "$@"
        ;;

     shell|bksh)
        exec node $NODE_ARGS $SCRIPT -home $BKJS_HOME -shell "$@"
        ;;

     run-web|web)
        exec node $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_RUN_ARGS -web "$@"
        ;;

     *)
        exec node $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_RUN_ARGS "$@"
        ;;
    esac
    exit
    ;;

  bkrsync)
    logger -p local0.notice -t bkrsync -- $@
    cmd=$(get_arg -bkcmd)
    rsync $(get_all_args "-bkcmd")
    rc=$?
    [ "$rc" != "0" ] && exit $rc
    [ -n "$cmd" ] && $BKJS_BIN $(echo $cmd|sed 's/%20/ /g') 1>&2
    exit 0
    ;;

  bkhelp)
    node -e "require('backendjs').core.showHelp()"
    exit
    ;;

  env)
    find_user
    process_cmd
    set
    ;;

  help)
    echo "Available commands:"
    echo
    echo "  start-instance - run on instance start, processed by all scripts"
    echo "  stop - kill the backend service"
    echo "  stop-web - kill web processes at once so they will restart with possibly updated modules"
    echo "  stop-worker - kill job worker processes at once so they will restart with possibly updated modules"
    echo "  stop-api - graceful API servers restart, drain all connections and restart one at a time, workers will restart after finishing jobs"
    echo ""
    echo "  shell - run backend REPL in the current backend directory, works with the backend core or local app.js application"
    echo "  monitor - run the backend monitor process which starts master, web server and job server"
    echo "  master - run the backend master process which starts web server and jobs server"
    echo "  web - run the backend web server only"
    echo "  watch - run the backend in watcher and master mode with all source files being monitored for changes, the server is restarts on any change automatically"
    echo "  run - run local backend with provided arguments"
    echo ""
    echo "  help - show all bkjs commands"
    echo "  bkhelp - show all backendjs module config parameters"
    echo "  env - show all environment variables"
    echo ""
    echo "Common options:"
    echo "  -home path - path to the backend home directory, default is $BKJS_HOME"
    echo "  -user name - set backend user on the remote or local side, default is ${BKJS_USER:-`whoami`}"
    echo "  -group name - set backend group on the remote or local side, default is ${BKJS_GROUP:-`id -gn`}"
    echo "  -debug - be verbose about what is happening"
    echo "  -trace file - redirect all output to a file"
    echo ""

    BKJS_ALLCMD=1
    process_cmd
    exit 0
    ;;

  *)
    # Load tools extensions, the protocol is:
    # - shell file must be in the tools/ and named bkjs-NAME
    # - it must check for BKJS_CMD and execute the code
    # - if the command is final then exit otherwise it will continue trying other tools
    # - it must support help) command to show help about all supported commands
    #
    process_cmd
    echo "$BKJS_BIN: $BKJS_CMD: command not found: $@" >&2
    exit 1
    ;;
esac

