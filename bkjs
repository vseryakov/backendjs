#!/bin/sh
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Apr 2024
#

# Word splitting like in sh
[ -n "$ZSH_VERSION" ] && setopt shwordsplit

# Find our real location
unset CDPATH
BKJS_BIN="$(readlink -f $0)"
BKJS_DIR="$(cd "${BKJS_BIN%/*}" ; pwd -P)"

# There are special commands that can be used as the script name
BKJS_NAME=$(basename $0)
if [ "${BKJS_NAME:0:2}" = "bk" -a "$BKJS_NAME" != "bkjs" ]; then
   BKJS_CMD=$BKJS_NAME
else
   BKJS_CMD=$1
   shift
fi

source $BKJS_DIR/tools/bkjs-functions
bkjs_init $@

debug HOME=$BKJS_HOME, USER=$BKJS_USER, ARGS=$@

case "$BKJS_CMD" in

  start)
    cd $BKJS_HOME
    if [ "$(whoami)" = "root" ]; then
        logger -s "$(date -R): $PPID: Running start hook..."
        run_bkjs_cmd start-hook
    fi
    [ -n "$BKJS_SERVER" -a "$BKJS_SERVER" != "none" ] && $0 run-$BKJS_SERVER
    exit 0
    ;;

  stop)
    pkill $1 -f "bkjs:"
    sleep 1
    pkill $1 -f "bkjs:"
    exit 0
    ;;

  restart-api|stop-api)
    pkill -USR2 -f "bkjs: server"
    pkill -USR2 -f "bkjs: master"
    exit 0
    ;;

  stop-web|stop-server|stop-master|stop-worker)
    name=${BKJS_CMD:5}
    [ -z "$name" ] && exit 0
    pkill $1 -f "bkjs: $name"
    exit 0
    ;;

  run|run-master|master|run-monitor|monitor|run-web|web|watch|shell|bksh|run-none|none)
    [ -f app.js ] && SCRIPT=app.js
    [ -z "$SCRIPT" -a -f lib/run.js ] && SCRIPT=lib/run.js
    [ -z "$SCRIPT" -a -f $BKJS_HOME/app.js ] && SCRIPT=$BKJS_HOME/app.js
    [ -z "$SCRIPT" -a -f $BKJS_HOME/lib/run.js ] && SCRIPT=$BKJS_HOME/lib/run.js
    [ -z "$SCRIPT" ] && SCRIPT=$BKJS_DIR/lib/run.js

    debug Starting $NODE_ARGS $SCRIPT $BKJS_HOME $BKJS_RUN_ARGS $@

    case "$BKJS_CMD" in
     run-none|none)
        ;;

     run-monitor|monitor)
        exec node $NODE_ARGS $SCRIPT -home $BKJS_HOME -syslog -daemon -monitor -master $BKJS_RUN_ARGS "$@"
        ;;

     run-master|master)
        exec node $NODE_ARGS $SCRIPT -home $BKJS_HOME -syslog -daemon -master $BKJS_RUN_ARGS "$@"
        ;;

     watch)
        exec node $NODE_ARGS $SCRIPT -home $BKJS_HOME -master -watch $BKJS_RUN_ARGS "$@"
        ;;

     shell|bksh)
        exec node $NODE_ARGS $SCRIPT -home $BKJS_HOME -shell "$@"
        ;;

     run-web|web)
        exec node $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_RUN_ARGS -web "$@"
        ;;

     *)
        exec node $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_RUN_ARGS "$@"
        ;;
    esac
    exit
    ;;

  bkrsync)
    logger -p local0.notice -t bkrsync -- $@
    cmd=$(get_arg -bkcmd)
    rsync $(get_all_args "-bkcmd")
    rc=$?
    [ "$rc" != "0" ] && exit $rc
    [ -n "$cmd" ] && $BKJS_BIN $(echo $cmd|sed 's/%20/ /g') 1>&2
    exit 0
    ;;

  bkhelp)
    node -e "require('backendjs').core.showHelp()"
    exit
    ;;

  env)
    set
    ;;

  help)
    echo "Available commands:"
    echo
    echo "  start - run on instance start, processed by all scripts as start-hook"
    echo "  stop - kill the backend service"
    echo "  stop-web - kill web processes at once so they will restart with possibly updated modules"
    echo "  stop-worker - kill job worker processes at once so they will restart with possibly updated modules"
    echo "  stop-api - graceful API servers restart, drain all connections and restart one at a time, workers will restart after finishing jobs"
    echo ""
    echo "  shell - run backend REPL in the current backend directory, works with the backend core or local app.js application"
    echo "  monitor - run the backend monitor process which starts master, web server and job server"
    echo "  master - run the backend master process which starts web server and jobs server"
    echo "  web - run the backend web server only"
    echo "  watch - run the backend in watcher and master mode with all source files being monitored for changes, the server is restarts on any change automatically"
    echo "  run - run local backend with provided arguments"
    echo ""
    echo "  help - show all bkjs commands"
    echo "  bkhelp - show all backendjs module config parameters"
    echo "  env - show all environment variables"
    echo ""
    echo "Common options:"
    echo "  -home path - path to the backend home directory, default is $BKJS_HOME"
    echo "  -user name - set backend user on the remote or local side, default is ${BKJS_USER:-`whoami`}"
    echo "  -debug - show debugging messages"
    echo "  -trace file - redirect all output to a file"
    echo "  -syslog - use logger -s for all messages "
    echo ""

    run_bkjs_cmd help
    exit 0
    ;;

  *)
    # Load tools extensions, the protocol is:
    # - shell file must be in the tools/ and named bkjs-NAME
    # - it must check for BKJS_CMD and execute the code
    # - if the command is final then exit otherwise it will continue trying other tools
    # - it must support help) command to show help about all supported commands
    #
    run_bkjs_cmd $BKJS_CMD 1
    msg command not found: $@
    exit 1
    ;;
esac

