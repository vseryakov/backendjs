#!/bin/bash
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#

get_ec2_param() {
    v=$(aws ssm get-parameter --name $1 |node -e 'var d="";process.stdin.on("data",(c)=>{d+=c});process.stdin.on("end",()=>{try{console.log(JSON.parse(d).Parameter.Value)}catch(e){};process.exit()})')
    echo ${v-:$2}
}

get_ec2_meta() {
    v=$(curl -s http://169.254.169.254/$1)
    [ "$v" = "" ] && T=`curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 30"` && v=$(curl -H "X-aws-ec2-metadata-token: $T" -s http://169.254.169.254/$1)
    echo $v
}

case "$BKJS_CMD" in

  check-server)
    if [[ $OS_TYPE =~ amazon ]]; then
       region=$(echo $(get_ec2_meta latest/meta-data/placement/availability-zone/)|sed 's/[a-z]$//')
       echo "Setting region $region ..."
       (aws configure set region $region)
       ([[ $(whoami) = root ]] && su ec2-user -c "aws configure set region $region")
       ($0 check-ec2-storage)
       ($0 check-ec2-hostname)
       ($0 check-cloudwatch-agent)
    fi
    ;;

  check-ec2-hostname)
    addr=$(get_local_ip)
    [ "$addr" = "" ] && echo "No IP address found" && exit
    tag=$($0 ec2-tag)
    $0 init-hostname -host ${tag:-ip}-$(echo $addr|sed 's/\./-/g')
    ;;

  send-alert)
    topic=$(get_arg -topic $(get_ec2_param bkjs-alert-topic))
    if [ "$topic" != "" ]; then
       region=$(get_arg -region)
       [ "$region" != "" ] && region="--region $region"
       aws sns publish $region --topic-arn $topic --message "$msg"
       [ "$?" = "0" ] && exit 0
    fi
    ;;

  ec2-show|ec2-ls)
    region=$(get_arg -region)
    [ "$region" != "" ] && region="--region $region"
    tag=$(get_arg -tag)
    [ "$tag" != "" -a "$tag" != "." ] && filter="Name=tag:Name,Values=${tag}"
    arch=$(get_arg -arch)
    [ "$arch" != "" -a "$arch" != "." ] && filter="Name=architecture,Values=${arch}"
    instances=$(aws ec2 describe-instances $region --filter "Name=instance-state-name,Values=running" $filter --query 'Reservations[*].Instances[*].[InstanceId,PrivateIpAddress,PublicIpAddress,KeyName,Architecture,InstanceType,Tags[?Key==`Name`]]' --output text|awk '{if($7=="None")print $0;else if($1=="Name")print $2;else printf "%s\t",$0;}')
    skip=$(get_arg -skip-tag)
    [ "$skip" != "" ] && instances=$(echo "$instances"|grep -v -F "$(echo "$skip"| tr ',' '\n')")
    [ "$PLATFORM" = "Linux" -a "$(get_flag -nomyip)" != "" ] && instances=$(echo "$instances"|grep -v -F $(get_local_ip))
    fmt=$(get_arg -fmt)
    [ "$fmt" != "" ] && instances=$(echo "$instances"|awk "{print $(echo $fmt|sed -e 's/id/\$1/' -e 's/ip/\$2/' -e 's/host/\$3/' -e 's/key/\$4/' -e 's/arch/\$5/' -e 's/name/\$6/' -e 's/type/\$7/')}")
    if [ "$(get_flag -line)" != "" ]; then
       echo "$instances" | tr '\n' ' '
    else
       echo "$instances"
    fi
    ;;

  ec2-host)
    $0 ec2-show -line -nomyip -fmt ip -tag "$(get_arg -tag)" -region "$(get_arg -region)" -skip-tag "$(get_arg -skip-tag)"
    ;;

  ec2-ssh)
    tag=$(get_arg -tag)
    [ "$tag" = "" ] && echo "-tag is required" && exit 1
    user=$(get_arg -user ec2-user)
    region=$(get_arg -region)
    index=$(get_arg -index)
    cmd=$(get_arg -cmd)
    pub=$(get_flag -pub)
    quiet=$(get_flag -quiet)
    skip=$(get_arg -skip-tag)
    sshargs=$(concat_arg -ssh $BKJS_SSH_ARGS)
    instances=$($0 ec2-show -nomyip -region "$region" -tag "$tag" -skip-tag "$skip"|tr '\t' ',')
    [ "$cmd" = "" -a "$index" = "" ] && index=1
    [ "$index" != "" -a "$index" != "." ] && instances=$(echo "$instances"|head -$index|tail -1)
    [ "$instances" = "" ] && exit 1
    for h in $instances; do
        [ "$quiet" = "" ] && echo "-- $h --"
        if [ "$pub" != "" ]; then
            host=$(echo $h|awk -F, '{print $3}')
        else
            host=$(echo $h|awk -F, '{print $2}')
        fi
        key=$(echo $h|awk -F, '{print $4}')
        ssh="$sshargs -l $user"
        [ "$key" != "" -a -f "~/.ssh/$key.pem" ] && ssh="$ssh -i ~/.ssh/$key.pem"
        ssh $ssh $host "$cmd"
    done
    ;;

  ec2-run)
    cmd=$(get_arg -cmd)
    [ "$cmd" = "" ] && echo "-cmd is required" && exit 1
    id=$(get_arg -id)
    tag=$(get_arg -tag)
    region=$(get_arg -region)
    if [ "$id" = "all" -o "$tag" = "all" -o "$tag" = "." ]; then
       id=$($0 ec2-show -region "$region" -fmt id|awk '{printf "%s,",$1}'|sed 's/,$//')
       tag=""
    fi
    [ "$id" != "" ] && targets="Key=instanceIds,Values=$id"
    [ "$tag" != "" ] && targets="Key=tag:Name,Values=$tag"
    [ "$targets" = "" ] && echo "no targets specified, either -tag or -id is required" && exit 1
    user=$(get_arg -user)
    [ "$user" != "" ] && cmd="su -l $user -c '$cmd'"
    [ "$region" != "" ] && region="--region $region"
    aws ssm send-command --targets $targets --document-name "AWS-RunShellScript" --parameters "commands=[\"$cmd\"]" $region
    ;;

  ec2-region)
    [ -f $HOME/.aws/config ] && region=$(awk '/^region/{print $3}' $HOME/.aws/config)
    [ ! -z $region ] && echo $region && exit
    echo $(get_ec2_meta latest/meta-data/placement/availability-zone/)|sed 's/[a-z]$//'
    ;;

  ec2-account)
    echo $(get_ec2_meta latest/dynamic/instance-identity/document)|sed 's/[{}":]//g'|tr , "\n"|grep accountId|awk '{print $2}'
    ;;

  ec2-tag)
    tag=$(get_arg -tag Name)
    id=$(get_ec2_meta latest/meta-data/instance-id)
    [ "$id" != "" ] && aws ec2 describe-tags --filter "Name=key,Values=$tag" "Name=resource-id,Values=$id" --output text| cut -f5|head -1
    ;;

  ec2-stop-api)
    $0 ec2-run -tag $(get_arg -tag api) -user $(get_arg -user ec2-user) -cmd "bkjs stop-api"
    ;;

  create-ami)
    tag=$(get_arg -tag)
    [ "$tag" != "" ] && instance_id=$(bkjs ec2-show -tag $tag -fmt id | head -1)
    instance_id=$(get_arg -instance-id $instance_id)
    if [ -z $instance_id ]; then
        echo 1 > $HOME/var/bkjs.init
        rm -f $HOME/var/bkjs.tag
        for f in /etc/monit.d/*.conf; do
            if [[ ! $f =~ (alert|system|bkjs).conf ]]; then
                sudo mv $f /tmp
                saved_files="$saved_files /tmp/$(basename $f)"
            fi
        done
        [ -f $HOME/etc/profile.local ] && mv $HOME/etc/profile.local /tmp
        sync
    fi
    name=$(get_arg -name)
    prefix=$(get_arg -prefix)
    [ "$(get_flag -force)" != "" ] && force="-force"
    bksh -no-db -aws-create-image -wait $force -instance-id $instance_id -name "$name" -prefix "$prefix"
    if [ -z $instance_id ]; then
        rm -f $HOME/var/bkjs.init
        for f in $saved_files; do sudo mv $f /etc/monit.d; done
        [ -f /tmp/profile.local ] && mv /tmp/profile.local $HOME/etc
    fi
    ;;

  create-launch-template-version)
    name=$(get_arg -name)
    skip=$(get_arg -skip)
    image=$(get_arg -image-name)
    if [ -z "$name" ]; then
        tag=$(get_arg -tag)
        [ "$tag" != "" ] && filter="--filter Name=tag:Name,Values=${tag}"
        name=$(aws ec2 describe-launch-templates $filter --query 'LaunchTemplates[*].LaunchTemplateName' --output text|sed 's/\t/\n/g'|sort|uniq)
    fi
    for c in $name; do
        for s in $skip; do
            [ "$c" = "$s" ] && c=""
        done
        [ -z $c ] && continue
        bksh -no-db -aws-create-launch-template-version -name $c -image-name "$image"
    done
    ;;

  init-sendmail-ses)
    get_config user -alert-user
    get_config host -alert-host
    get_config password -alert-password
    [ "$user" = "" -o "$password" = "" -o "$host" = "" ] && echo "-host,-user,-password must be provided" && exit
    [ "$(whoami)" != "root" ] && echo "must run by root" && exit 1
    yum -y install sendmail-cf
    echo "AuthInfo:$host \"U:root\" \"I:$user\" \"P:$password\" \"M:LOGIN\"" > /etc/mail/authinfo
    if [[ $host =~ us-east ]]; then
       echo "AuthInfo:ses-smtp-prod-335357831.us-east-1.elb.amazonaws.com \"U:root\" \"I:$user\" \"P:$password\" \"M:LOGIN\"" >> /etc/mail/authinfo
    fi
    if [[ $host =~ us-west ]]; then
       echo "AuthInfo:ses-smtp-us-west-2-prod-14896026.us-west-2.elb.amazonaws.com \"U:root\" \"I:$user\" \"P:$password\" \"M:LOGIN\"" >> /etc/mail/authinfo
    fi
    makemap hash /etc/mail/authinfo.db < /etc/mail/authinfo
    if [ "$(grep -s "$host" /etc/mail/access)" = "" ]; then
       echo "Connect:$host RELAY" >> /etc/mail/access
       makemap hash /etc/mail/access.db < /etc/mail/access
    fi
    if [ "$(grep -s "ses-smtp" /etc/mail/access)" = "" ]; then
       if [[ $host =~ us-east ]]; then
          echo "Connect:ses-smtp-prod-335357831.us-east-1.elb.amazonaws.com RELAY" >> /etc/mail/access
       fi
       if [[ $host =~ us-west ]]; then
          echo "Connect:ses-smtp-us-west-2-prod-14896026.us-west-2.elb.amazonaws.com RELAY" >> /etc/mail/access
       fi
       makemap hash /etc/mail/access.db < /etc/mail/access
    fi
    file=/etc/mail/relay.mc
    egrep -v '^MAILER' /etc/mail/sendmail.mc > $file
    echo "define(\`SMART_HOST', \`$host')dnl" >> $file
    echo "define(\`RELAY_MAILER_ARGS', \`TCP \$h 587')dnl" >> $file
    echo "define(\`confAUTH_MECHANISMS', \`LOGIN PLAIN')dnl" >> $file
    echo "FEATURE(\`authinfo', \`hash -o /etc/mail/authinfo.db')dnl" >> $file
    get_config domain -domain
    if [ "$domain" != "" ]; then
       echo "MASQUERADE_AS(\`$domain')dnl" >> $file
       echo "FEATURE(masquerade_envelope)dnl" >> $file
       echo "FEATURE(masquerade_entire_domain)dnl" >> $file
    fi
    egrep '^MAILER' /etc/mail/sendmail.mc >> $file
    m4 $file > /etc/mail/sendmail.cf
    service sendmail restart
    ;;

  init-sendmail-ses-relay)
    off=$(get_flag -off)
    if [ "$off" != "" ]; then
       if [ "$(egrep -s -E "^DSemail-smtp" /etc/mail/sendmail.cf)" != "" ]; then
          sed -i 's/^DSemail-smtp/#DSemail-smtp/' /etc/mail/sendmail.cf
          service sendmail restart
       fi
    else
       if [ "$(egrep -s -E "^DSemail-smtp" /etc/mail/sendmail.cf)" = "" ]; then
          sed -r -i 's/^#+DSemail-smtp/DSemail-smtp/' /etc/mail/sendmail.cf
          service sendmail restart
       fi
    fi
    ;;

  init-cloudwatch-agent)
    dir=/opt/aws/amazon-cloudwatch-agent
    if [ ! -d $dir ]; then
        arch=$OS_ARCH
        [ "$arch" = "x64" ] && arch=amd64
        wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/$arch/latest/amazon-cloudwatch-agent.rpm
        rpm -i amazon-cloudwatch-agent.rpm
        rm amazon-cloudwatch-agent.rpm
    fi
    $0 check-cloudwatch-agent
    ;;

  check-cloudwatch-agent)
    dir=/opt/aws/amazon-cloudwatch-agent
    [ ! -d $dir ] && exit
    tag=$($0 ec2-tag)
    [ "$tag" = "" ] && exit
    user=$(get_arg -user ec2-user)
    files="access.log message.log error.log $BKJS_CLOUDWATCH_LOGS"
    for log in $files; do
        [ "$logs" != "" ] && logs="$logs,"
        logs="$logs{ \"file_path\": \"/home/$user/log/$log\", \"log_group_name\": \"$log\", \"log_stream_name\": \"$tag\", \"multi_line_start_pattern\": \"^[^ \\t]\", \"timestamp_format\": \"%Y-%m-%dT%H:%M:%S.%f\" }"
    done
    tmp=/cwa.json
    conf=$dir/etc/amazon-cloudwatch-agent.json
    echo "{ \"agent\": { \"logfile\": \"/var/log/cwagent.log\" }, \"logs\": { \"logs_collected\": { \"files\": { \"collect_list\": [ $logs ] } }, \"log_stream_name\": \"$tag\" } }" > $tmp
    cmp $conf $tmp
    [ "$?" = "0" ] && exit
    mv $tmp $conf
    $dir/bin/config-translator --input $dir/etc/amazon-cloudwatch-agent.json --output $dir/etc/amazon-cloudwatch-agent.toml --mode "auto"
    case "$OS_TYPE" in
      amazon)
        systemctl enable amazon-cloudwatch-agent
        systemctl restart amazon-cloudwatch-agent
        ;;
    esac
    ;;

  check-ec2-storage)
    user=$(get_arg -user ec2-user)
    mnt=$(get_arg -mnt /home/$user/data)
    dev=$(grep $mnt /etc/fstab|cut -f1 -d' ')
    if [ "$dev" = "" ]; then
       echo $mnt not in /etc/fstab
       exit
    fi
    stat $dev
    [  "$?" != "0" ] && exit
    mountpoint -q $mnt
    if [  "$?" = "0" ]; then
       echo $mnt already mounted
       exit
    fi
    cd /home/$user
    ln -sf $mnt/log
    ln -sf $mnt/var
    fs=$(blkid |grep $dev)
    if [ "$fs" != "" ]; then
       echo mounting $dev to $mnt
       mount -a
    else
       echo creating $mnt on $dev
       mkfs.xfs $dev
       mount -a
    fi
    mkdir -p $mnt/log $mnt/var
    chown -R $user $mnt
    service rsyslog restart
    ;;

  ecr-push)
    tag=$(get_arg -tag)
    [ "$tag" = "" ] && echo "-tag is required" && exit 1
    ecr="$($0 ec2-account).dkr.ecr.$($0 ec2-region).amazonaws.com"
    aws ecr get-login-password| docker login --username AWS --password-stdin $ecr
    [ "$?" != "0" ] && exit 1
    ecr="$ecr/$tag"
    version=$(get_arg -version)
    [ ! -z $version ] && ecr="$ecr:$version"
    if [ ! -z $(get_flag -force) ]; then
        aws ecr batch-delete-image --repository-name $tag --image-ids imageTag=${version:-latest}
    fi
    docker tag $tag $ecr
    docker push $ecr
    ;;

  ecs-run)
    task=$(get_arg -task)
    cluster=$(get_arg -cluster default)

    network="assignPublicIp=ENABLED"
    gid=$(get_arg -gid)
    group=$(get_arg -group)
    [ ! -z $group ] && gid=$(aws ec2 describe-security-groups --filters Name=group-name,Values=$group --query "SecurityGroups[*].[GroupId]" --output text|tr '\n' ,|sed s/,$//)
    [ ! -z $gid ] && network="$network,securityGroups=[$gid]"

    sid=$(get_arg -sid)
    subnet=$(get_arg -subnet)
    [ ! -z $subnet ] && sid=$(aws ec2 describe-subnets --query 'Subnets[*].[SubnetId,Tags[?Key==`Name`]]' --output text|awk "/Name/{if(s&&index(\$2,\"$subnet\")==1)print s;s=\"\"} /^subnet/{s=\$0}"|tr '\n' ,|sed s/,$//)
    [ ! -z $sid ] && network="$network,subnets=[$sid]"

    cpu=$(get_arg -cpu)
    if [ ! -z $cpu ]; then
        [ ! -z $overrides ] && overrides="$overrides,"
        overrides="$overrides\"cpu\":$cpu"
    fi
    mem=$(get_arg -mem)
    if [ ! -z $mem ]; then
        [ ! -z $overrides ] && overrides="$overrides,"
        overrides="$overrides\"memory\":$mem"
    fi
    arm=$(get_arg -arm)
    if [ ! -z $arm ]; then
        [ ! -z $overrides ] && overrides="$overrides,"
        overrides="$overrides\"runtimePlatform\":{\"cpuArchitecture\":\"ARM64\"}"
    fi

    tag=$(get_arg -tag)
    if [ ! -z $tag ]; then
        container=$(aws ecs describe-task-definition --task-definition $task --query taskDefinition.containerDefinitions[*].name --output text)
        [ ! -z $overrides ] && overrides="$overrides,"
        overrides="$overrides\"containerOverrides\":[{\"name\":\"$container\",\"environment\":[{\"name\":\"BKJS_TAG\",\"value\":\"$tag\"}]}]"
    fi

    cmd="aws ecs run-task --cluster $cluster --task-definition $task --count $(get_arg -count 1) --overrides {$overrides} --network-configuration awsvpcConfiguration={$network}"
    [ ! -z $tag ] && cmd="$cmd --tags key=Name,value=$tag"
    [ ! -z $(get_flag -exec) ] && cmd="$cmd --enable-execute-command"

    type=$(get_arg -type)
    if [ ! -z $type ]; then
        cmd="$cmd --launch-type $type"
    else
        cmd="$cmd --capacity-provider-strategy capacityProvider=$(get_arg -provider FARGATE)"
    fi

    [ ! -z "$BKJS_DEBUG" ] && echo $cmd
    [ ! -z $(get_flag -dry-run) ] && echo $cmd && exit

    $cmd
    ;;

  help)
    echo ""
    echo "AWS provisioning commands using:"
    echo ""
    echo "  ec2-show [-region region] [-tag NAME] [-skip-tag NAME] [-nomyip] [-line] [-fmt fmt]- show running instances in region, optional tag pattern can be used for filter, FMT may contain: id,ip,host,key,name,arch which will be replaced with actual values"
    echo "  ec2-run -tag NAME [-id ID] -cmd cmd [-region  region] [-user NAME] - run a command over SSM by tag name or instance id, if -tag or -id one is 'all' then all instances will run the command"
    echo "  ec2-ssh -tag NAME [-region region] [-pub] [-cmd cmd] [-index N|.] - ssh into a host by tag name, key name will be used to specify a keypair from ~/.ssh/, -pub tells to use public IP, -cmd if specified will be run on all matched hosts, -index tell which specific host to use only, dot means all hosts"
    echo "  ec2-host [-tag NAME] [-skip-tag NAME] - show running instances local IP addresses by tag"
    echo "  ec2-region - current instance region"
    echo "  ec2-account - current instance account id"
    echo "  ec2-tag [-tag NAME] - current instance tag name, default key is Name"
    echo "  ec2-stop-api [-tag NAME] - restart gracefully on the specified instances by tag"
    echo "  create-ami [-tag NAME] [-prefix PREFIX] - create a new AMI from the given running instance by tag or the current instance"
    echo "  create-launch-template-version [-name NAME] [-skip A B] [-image-name *] - create new launch template verson with the latest AMI, if no -name is given all existing templates will be updated"
    echo "  init-sendmail-ses - [-domain DOMAIN] -alert-host HOST -alert-user USER -alert-password PW - configure sendmail as relay to SES SMTP"
    echo "  init-cloudwatch-agent [-restart] - install AWS Cloudwatch agent to send backend logs to Cloudwatch Logs"
    echo "  ecr-push -tag NAME [-version V] [-force] - tag and push a docker image to ECR"
    echo "  ecs-run -task NAME [-cluser default] [-type EC2|FARGATE] [-provider FARGATE_SPOT] [-gid ID] [-group NAME] [-sid ID] [-subnet NAME] [-cpu N] [-memory N] [-tag T] [-arm] [-exec] [-dry-tun] - run an ECS task in subnets with security groups, overrides cpu/mem, pass tag to bkjs process as instance tag"
    ;;

  *)
    BKJS_UNKNOWN=1
    ;;
esac

