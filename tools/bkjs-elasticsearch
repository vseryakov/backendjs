#!/bin/bash
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#

case "$BKJS_CMD" in

  get-elasticsearch|es-get)
    [ "$ELASTICSEARCH_PREFIX" = "" ] && ELASTICSEARCH_PREFIX=$BKJS_PREFIX/elasticsearch
    [ "$(get_flag -force)" != "" -a "$ELASTICSEARCH_PREFIX" != "" ] && rm -rf $ELASTICSEARCH_PREFIX
    if [ ! -d $ELASTICSEARCH_PREFIX ]; then
        mkdir -p $ELASTICSEARCH_PREFIX
        platform=$(echo $PLATFORM | tr [:upper:] [:lower:])
        case $OS_ARCH in
          arm64)
            platform="$platform-aarch64"
            ;;
          *)
            platform="$platform-x86_64"
            ;;
        esac
        ver=$(get_arg -vesion 8.3.3)
        curl -L -o es.tgz https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-$ver-$platform.tar.gz
        tar -C $ELASTICSEARCH_PREFIX --strip-components=1 -xzf es.tgz
        rm -rf es.tgz
        cd $ELASTICSEARCH_PREFIX
        echo "node.roles: [master,data]" >> config/elasticsearch.yml
        echo "path.data: $BKJS_HOME/var" >> config/elasticsearch.yml
        echo "path.logs: $BKJS_HOME/log" >> config/elasticsearch.yml
        echo "action.destructive_requires_name: true" >> config/elasticsearch.yml
        echo 'xpack.security.enabled: false' >> config/elasticsearch.yml
        if [[ $OS_TYPE =~ amazon ]]; then
            echo 'network.host: ["_ec2_","_local_"]' >> config/elasticsearch.yml
            echo 'discovery.seed_providers: ec2' >> config/elasticsearch.yml
            echo 'cloud.node.auto_attributes: true' >> config/elasticsearch.yml
            echo 'cluster.routing.allocation.awareness.attributes: aws_availability_zone' >> config/elasticsearch.yml
            bin/elasticsearch-plugin install discovery-ec2 -b
        fi
        echo "-Dlog4j2.formatMsgNoLookups=true" >> config/jvm.options
    fi
    exit
    ;;

  init-elasticsearch|es-init)
    ($0 get-elasticsearch $(get_all_args))
    ($0 run-elasticsearch $(get_all_args))
    if [ "$PLATFORM" = "Linux" ]; then
       sudo $0 init-elasticsearch-monit $(get_all_args)
    fi
    exit
    ;;

  get-elasticsearch-nodetype)
    [ "$ELASTICSEARCH_PREFIX" = "" ] && ELASTICSEARCH_PREFIX=$BKJS_PREFIX/elasticsearch
    roles=$(grep "node.roles:" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml|awk -F: '{print $2}'|sed 's/[^a-z]//g')
    case "$roles" in
    masterdata|datamaster)
      echo node
      ;;
    data)
      echo data
      ;;
    master)
      echo master
      ;;
    "")
      echo client
      ;;
    esac
    exit
    ;;

  run-elasticsearch|es-run)
    [ "$ELASTICSEARCH_PREFIX" = "" ] && ELASTICSEARCH_PREFIX=$BKJS_PREFIX/elasticsearch
    # Percent from the total memory
    memsize=$(get_arg -memsize)
    [ "$memsize" != "" ] && memmax="$(( ($(free -m|grep Mem:|awk '{print $2}') * $memsize) / 100 ))m"
    memmax=$(get_arg -memmax $memmax)
    if [ "$memmax" != "" ]; then
       $SED "s/^-Xms.+/-Xms$memmax/" $ELASTICSEARCH_PREFIX/config/jvm.options
       $SED "s/^-Xmx.+/-Xmx$memmax/" $ELASTICSEARCH_PREFIX/config/jvm.options
       mkdir -p $ELASTICSEARCH_PREFIX/config/jvm.options.d/
       echo -e "-Xms$memmax\n-Xmx$memmax\n" > $ELASTICSEARCH_PREFIX/config/jvm.options.d/bkjs.options
    fi
    case "$(get_arg -nodetype)" in
    node)
      $SED -e "s/^node.roles.+$/node.roles: [master,data]/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    master)
      $SED -e "s/^node.roles.+$/node.roles: [master]/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    data)
      $SED -e "s/^node.roles.+$/node.roles: [data]/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    client)
      $SED -e "s/^node.roles.+$/node.roles: []/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    any)
      $SED -e "s/^node.roles.+$/node.roles: [master,data,ingest,ml,transform]/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    esac
    $ELASTICSEARCH_PREFIX/bin/elasticsearch -p $BKJS_HOME/var/elasticsearch.pid -d >>$BKJS_HOME/log/message.log 2>&1
    exit
    ;;

  stop-elasticsearch|es-stop)
    pkill -f org.elasticsearch
    exit
    ;;

  restart-elasticsearch)
    pkill -f org.elasticsearch
    sleep 1
    pkill -f -9 org.elasticsearch
    $0 run-elasticsearch $(get_all_args)
    exit
    ;;

  reset-elasticsearch)
    pkill -f org.elasticsearch
    rm -rf $BKJS_HOME/var/nodes
    rm -f $BKJS_HOME/log/elasticsearch*
    $0 run-elasticsearch
    exit
    ;;

  configure-elasticsearch)
    host=$(get_arg -host localhost)
    curl -XPUT -H 'Content-Type: application/json' -d '{"persistent":{"script.max_compilations_rate":"1000/1m"}}' http://$host:9200/_cluster/settings
    exit
    ;;

  stop-elasticsearch-replication)
    host=$(get_arg -host localhost)
    curl -XPUT -H 'Content-Type: application/json' -d '{"persistent":{"cluster.routing.allocation.enable":"primaries"}}' http://$host:9200/_cluster/settings
    exit
    ;;

  start-elasticsearch-replication)
    host=$(get_arg -host localhost)
    curl -XPUT -H 'Content-Type: application/json' -d '{"persistent":{"cluster.routing.allocation.enable":null}}' http://$host:9200/_cluster/settings
    exit
    ;;

  set-elasticsearch-disk-watermark)
    host=$(get_arg -host localhost)
    high=$(get_arg -high 95)
    low=$(get_arg -low 95)
    flood=$(get_arg -flood 95)
    curl -XPUT -H 'Content-Type: application/json' -d "{\"transient\":{\"cluster.routing.allocation.disk.watermark.flood_stage\":\"$flood%\",\"cluster.routing.allocation.disk.watermark.high\":\"$high%\",\"cluster.routing.allocation.disk.watermark.low\":\"$low%\"}}" http://$host:9200/_cluster/settings
    exit
    ;;

  upgrade-elasticsearch-node)
    host=$(get_arg -host localhost)
    memsize=$(get_arg -memsize 50)
    nodetype=$($0 get_arg -nodetype)
    $0 stop-elasticsearch-replication -host $host
    $0 stop-elasticsearch
    $0 get-elasticsearch -force
    if [ -f /etc/monit.d/elasticsearch.conf ]; then
        sudo monit reload
    else
        $0 run-elasticsearch -nodetype "$nodetype" -memsize $memsize
    fi
    $0 start-elasticsearch-replication -host $host
    exit
    ;;

  exclude-elasticsearch-node)
    host=$(get_arg -host localhost)
    ip=$(get_arg -ip $(get_local_ip))
    [ "$ip" = "." ] && ip=""
    curl -XPUT -H 'Content-Type: application/json' -d "{\"transient\":{\"cluster.routing.allocation.exclude._ip\":\"$ip\"}}" http://$host:9200/_cluster/settings
    exit
    ;;

  elasticsearch-health|es-w)
    host=$(get_arg -host localhost)
    curl -XGET "http://$host:9200/_cat/health?v"
    exit
    ;;

  elasticsearch-space|es-df)
    host=$(get_arg -host localhost)
    curl -XGET "http://$host:9200/_cat/allocation?v"
    exit
    ;;

  elasticsearch-shards|es-s)
    host=$(get_arg -host localhost)
    curl -XGET "http://$host:9200/_cat/shards?v"
    exit
    ;;

  elasticsearch-tasks|es-t)
    host=$(get_arg -host localhost)
    nodes=$(get_arg -nodes)
    curl -XGET "http://$host:9200/_tasks?pretty&detailed&nodes=$nodes"
    exit
    ;;

  elasticsearch-ls|es-ls)
    host=$(get_arg -host localhost)
    curl -XGET "http://$host:9200/_cat/nodes?h=ip,version,cpu,ram.percent,node.role,master&v"
    exit
    ;;

  elasticsearch-nodes|es-n)
    host=$(get_arg -host localhost)
    curl -s -XGET "http://$host:9200/_nodes/process?pretty"|node -e 'var d="";process.stdin.on("data",(c)=>{d+=c});process.stdin.on("end",()=>{try{d=JSON.parse(d).nodes;for(var p in d)console.log(p,"  ",d[p].ip,"          ".substr(0,15-d[p].ip.length),String(d[p].roles))}catch(e){};process.exit()})'
    exit
    ;;

  init-monit-elasticsearch|init-elasticsearch-monit)
    find_user
    echo "check process elasticsearch with pidfile \"$BKJS_HOME/var/elasticsearch.pid\" start program = \"$BKJS_BIN run-elasticsearch $(get_all_args)\" as uid $BKJS_USER and gid $BKJS_GROUP stop program = \"$BKJS_BIN stop-elasticsearch\" if failed url http://127.0.0.1:9200/ with timeout 15 seconds for 2 cycles then restart" > /etc/monit.d/elasticsearch.conf
    echo "check file elasticsearch-log with path $BKJS_HOME/log/elasticsearch.log if match 'java.lang.OutOfMemoryError' then exec \"$BKJS_BIN restart-elasticsearch $(get_all_args)\"" >> /etc/monit.d/elasticsearch.conf
    monit reload
    exit
    ;;

  init-monit-elasticsearch-health|init-elasticsearch-health-monit)
    host=$(get_arg -host elasticsearch)
    echo "check host elasticsearch-health with address $host if failed url http://$host:9200/_cluster/health and content = 'green' with timeout 60 seconds for 2 cycles then alert" > /etc/monit.d/elasticsearch-health.conf
    monit reload
    exit
    ;;

  stop-elasticsearch-monit)
    [ "$(whoami)" != "root" ] && echo "Not root, skipping setup" && exit 1
    rm -rf /etc/monit.d/elasticsearch*
    monit reload
    $0 stop-elasticsearch
    exit
    ;;

  migrate-elasticsearch)
    limit=$(get_arg -limit 250)
    from=$(get_arg -from)
    to=$(get_arg -to http://localhost:9200)
    list="$(curl -XGET $from/_cat/indices?pretty=true -v | cut -d $' ' -f3)"
    for idx in $list
    do
      elasticdump --bulk=true --limit=$limit --output=$to/$idx --input=$from/$idx
    done
    exit
    ;;

  init-elasticsearch-cloudwatch-logs)
    echo "BKJS_CLOUDWATCH_LOGS=elasticsearch.log" >> $BKJS_HOME/etc/profile
    $0 init-cloudwatch-agent
    exit
    ;;

  help)
    echo ""
    echo "Elasticsearch commands:"
    echo ""
    echo "  get-elasticsearch [-force] - install local ElasticSearch server in $BKJS_PREFIX/elasticsearch"
    echo "  init-elasticsearch - download and install local ElasticSearch, start the server, configure monit"
    echo "  run-elasticsearch [-memsize PERCENT] [-memmax SIZE] [-nodetype TYPE] - run local ElasticSearch server installed in $BKJS_PREFIX/elasticsearch, -memmax is max heap size, -memsize is the percent of the total memory to use, -nodetype can be node,master,data,client"
    echo "  stop-elasticsearch - stop local ElasticSearch server"
    echo "  reset-elasticsearch - remove local ElasticSearch database and restart the server"
    echo "  configure-elasticsearch - configure ElasticSearch common parameters for scalability"
    echo "  init-elasticsearch-monit [-memsize PERCENT] [-memmax SIZE] [-nodetype TYPE] - setup monit to keep elasticsearch service running"
    echo "  init-elasticsearch-cloudwatch-logs - setup elastichsearch.log to be sent to CloudWatch Logs"
    echo "  exclude-elasticsearch-node [-host HOST] [-ip IP] - disable a node by IP address"
    echo "  elasticsearch-health|es-w [-host HOST] - show cluster health status"
    echo "  elasticsearch-space|es-df [-host HOST] - show cluster disk allocations"
    echo "  elasticsearch-shards|es-s [-host HOST] - show cluster shards allocations and distributions"
    echo "  elasticsearch-tasks|es-t [-host HOST] [-nodes ID] - show cluster running tasks for all or specific nodes"
    echo "  elasticsearch-ls|es-ls [-host HOST] - show cluster nodes"
    echo "  elasticsearch-nodes|es-n [-host HOST] - show cluster nodes IDs to be used for other commands by node id"
    echo ""
    ;;
esac

