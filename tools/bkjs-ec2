#!/bin/sh
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#

case "$BKJS_CMD" in

  help)
    echo ""
    echo "  ec2-show [-region region] [-tag NAME] [-skip-tag NAME] [-nomyip] [-line] [-fmt fmt]- show running instances in region, optional tag pattern can be used for filter, FMT may contain: id,ip,host,key,name,arch which will be replaced with actual values"
    echo "  ec2-run -tag NAME [-id ID] -cmd cmd [-region  region] [-user NAME] - run a command over SSM by tag name or instance id, if -tag or -id one is 'all' then all instances will run the command"
    echo "  ec2-ssh -tag NAME [-region region] [-pub] [-cmd cmd] [-index N|.] - ssh into a host by tag name, key name will be used to specify a keypair from ~/.ssh/, -pub tells to use public IP, -cmd if specified will be run on all matched hosts, -index tell which specific host to use only, dot means all hosts"
    echo "  ec2-host [-tag NAME] [-skip-tag NAME] - show running instances local IP addresses by tag"
    echo "  ec2-meta PATH - show meta data"
    echo "  ec2-region - current instance region"
    echo "  ec2-account - current instance account id"
    echo "  ec2-tag [-tag NAME] - current instance tag name, default key is Name"
    echo "  ec2-check-storage - runs on start to check for external disk mounted to $BKJS_HOME/data, links log/var to it"
    echo "  ec2-check-hostname - runs on start to set the hostname to the EC2 tag"
    ;;

  start-hook)
    region=$(echo $(get_ec2_meta latest/meta-data/placement/availability-zone/)|sed 's/[a-z]$//')
    [ -z "$region" ] && return
    # Keep THP disabled by default
    echo never > /sys/kernel/mm/transparent_hugepage/enabled
    msg Setting region $region ...
    (aws configure set region $region)
    ([ "$(whoami)" = "root" ] && su ec2-user -c "aws configure set region $region")
    ($BKJS_BIN ec2-check-storage)
    ($BKJS_BIN ec2-check-hostname)
    ;;

  ec2-show|ec2-ls)
    region=$(get_arg -region)
    [ -n "$region" ] && region="--region $region"
    tag=$(get_arg -tag)
    [ -n "$tag" -a "$tag" != "." ] && filter="Name=tag:Name,Values=${tag}"
    arch=$(get_arg -arch)
    [ -n "$arch" -a "$arch" != "." ] && filter="Name=architecture,Values=${arch}"
    instances=$(aws ec2 describe-instances $region --filter "Name=instance-state-name,Values=running" $filter --query 'Reservations[*].Instances[*].[InstanceId,PrivateIpAddress,PublicIpAddress,KeyName,Architecture,InstanceType,Tags[?Key==`Name`].Value]' --output yaml|awk -F'- ' '{if($4!="")printf "\n%s\t",$4;else printf "%-10s\t",$2?$2:$3;}'|egrep -v '^$')
    skip=$(get_arg -skip-tag)
    [ -n "$skip" ] && instances=$(echo "$instances"|grep -v -F "$(echo "$skip"| tr ',' '\n')")
    [ "$PLATFORM" = "Linux" -a -n "$(get_flag -nomyip)" ] && instances=$(echo "$instances"|grep -v -F $(get_local_ip))
    fmt=$(get_arg -fmt)
    [ "$fmt" != "" ] && instances=$(echo "$instances"|awk "{print $(echo $fmt|sed -e 's/id/\$1/' -e 's/ip/\$2/' -e 's/host/\$3/' -e 's/key/\$4/' -e 's/arch/\$5/' -e 's/name/\$6/' -e 's/type/\$7/')}")
    if [ -n "$(get_flag -line)" ]; then
       echo "$instances" | tr '\n' ' '
    else
        [ -n "$(get_flag -list)" ] && instances=$(echo "$instances"|sed -e 's/\t/,/g' -e 's/ //g')
       echo "$instances"
    fi
    exit
    ;;

  ec2-host)
    $BKJS_BIN ec2-show -line -nomyip -fmt ip -tag "$(get_arg -tag)" -region "$(get_arg -region)" -skip-tag "$(get_arg -skip-tag)"
    exit
    ;;

  ec2-ssh)
    tag=$(get_arg -tag)
    [ -z "$tag" ] && echo "-tag is required" && exit 1
    user=$(get_arg -user ec2-user)
    region=$(get_arg -region)
    index=$(get_arg -index)
    cmd=$(get_arg -cmd)
    pub=$(get_flag -pub)
    quiet=$(get_flag -quiet)
    skip=$(get_arg -skip-tag)
    sshargs=$(concat_arg -ssh $BKJS_SSH_ARGS)
    instances=$($BKJS_BIN ec2-show -nomyip -list -region "$region" -tag "$tag" -skip-tag "$skip")
    [ -z "$cmd" -a -z "$index" ] && index=1
    [ -n "$index" -a "$index" != "." ] && instances=$(echo "$instances"|head -$index|tail -1)
    [ -z "$instances" ] && exit 1
    for h in $instances; do
        [ -z "$quiet" ] && echo "-- $h --"
        if [ "$pub" != "" ]; then
            host=$(echo $h|awk -F, '{print $3}')
        else
            host=$(echo $h|awk -F, '{print $2}')
        fi
        key=$(echo $h|awk -F, '{print $4}')
        ssh="$sshargs -l $user"
        [ "$key" != "" -a -f "~/.ssh/$key.pem" ] && ssh="$ssh -i ~/.ssh/$key.pem"
        ssh $ssh $host "$cmd"
    done
    exit
    ;;

  ec2-run)
    cmd=$(get_arg -cmd)
    [ "$cmd" = "" ] && echo "-cmd is required" && exit 1
    id=$(get_arg -id)
    tag=$(get_arg -tag)
    region=$(get_arg -region)
    if [ "$id" = "all" -o "$tag" = "all" -o "$tag" = "." ]; then
       id=$($BKJS_BIN ec2-show -region "$region" -fmt id|awk '{printf "%s,",$1}'|sed 's/,$//')
       tag=""
    fi
    [ "$id" != "" ] && targets="Key=instanceIds,Values=$id"
    [ "$tag" != "" ] && targets="Key=tag:Name,Values=$tag"
    [ "$targets" = "" ] && echo "no targets specified, either -tag or -id is required" && exit 1
    user=$(get_arg -user)
    [ "$user" != "" ] && cmd="su -l $user -c '$cmd'"
    [ "$region" != "" ] && region="--region $region"
    aws ssm send-command --targets $targets --document-name "AWS-RunShellScript" --parameters "commands=[\"$cmd\"]" $region
    exit
    ;;

  ec2-region)
    [ -f $HOME/.aws/config ] && region=$(awk '/^region/{print $3}' $HOME/.aws/config)
    [ -n "$region" ] && echo $region && exit
    echo $(get_ec2_meta latest/meta-data/placement/availability-zone/)|sed 's/[a-z]$//'
    exit
    ;;

  ec2-meta)
    echo $(get_ec2_meta $(get_all_args))
    exit
    ;;

  ec2-account)
    [ -f $HOME/.aws/config ] && id=$(awk '/^account-id/{print $3}' $HOME/.aws/config)
    [ -n "$id" ] && echo $id && exit
    echo $(get_ec2_meta latest/dynamic/instance-identity/document)|sed 's/[{}":]//g'|tr , "\n"|grep accountId|awk '{print $2}'
    exit
    ;;

  ec2-tag)
    tag=$(get_arg -tag Name)
    v=$(get_ec2_meta latest/meta-data/tags/instance/$tag)
    [ -n "$v" ] && echo $v && exit
    id=$(get_ec2_meta latest/meta-data/instance-id)
    [ -n "$id" ] && aws ec2 describe-tags --filter "Name=key,Values=$tag" "Name=resource-id,Values=$id" --output text| cut -f5|head -1
    exit
    ;;

  ec2-check-hostname)
    addr=$(get_local_ip)
    [ "$addr" = "" ] && logger -s "No IP address found" && exit
    uname=$(uname -n)
    host=$(get_arg -host $BKJS_HOST)
    if [ -z "$host" ]; then
        tag=$($BKJS_BIN ec2-tag)
        host=${tag:-ip}-$(echo $addr|sed 's/\./-/g')
    fi
    domain=$(get_arg -domain $BKJS_DOMAIN)
    msg Checking $host@$domain ...
    $BKJS_BIN setup-hostname -host $host -domain $domain
    [ "$uname" != "$(uname -n)" ] && killall -HUP rsyslogd
    exit
    ;;

  ec2-check-storage)
    user=$(get_arg -user ec2-user)
    mnt=$(get_arg -mnt $BKJS_HOME/data)
    dev=$(grep $mnt /etc/fstab|cut -f1 -d' ')
    if [ "$dev" = "" ]; then
       logger -s $mnt not in /etc/fstab
       exit
    fi
    stat $dev
    [  "$?" != "0" ] && exit
    mountpoint -q $mnt
    if [  "$?" = "0" ]; then
       msg $mnt already mounted
       exit
    fi
    cd $BKJS_HOME
    ln -sf $mnt/log
    ln -sf $mnt/var
    fs=$(blkid |grep $dev)
    if [ "$fs" != "" ]; then
       msg mounting $dev to $mnt
       mount -a
    else
       msg creating $mnt on $dev
       mkfs.xfs $dev
       mount -a
    fi
    mkdir -p $mnt/log $mnt/var
    chown -R $user $mnt
    exit
    ;;

esac

