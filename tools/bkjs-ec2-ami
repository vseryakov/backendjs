#!/bin/sh

case "$BKJS_CMD" in

  help|ec2-help)
    echo
    echo "  ec2-create-ami [-tag NAME] [-prefix PREFIX] - create a new AMI from the given running instance by tag or the current instance"
    echo "  ec2-create-launch-template-version [-name NAME] [-tag TAG] [-skip A B] [-image-name *] - create new launch template verson with the latest AMI, if no -name is given all existing templates matched by tag if given will be updated"
    echo "  ec2-build-ami - [-ami ID] [-size G] [-ami-user alpine] - build a new AMI for Alpine Linux, runs alpine-build-ami-hook for actual setup"
    echo "  ec2-build-ami-hook - actual new AMI build script after it is launched and ssh is ready: INSTANCE_USER, INSTANCE_HOST, INSTANCE_ID, INSTANCE_IP, INSTANCE_ARCH are set"
    ;;

  ec2-create-ami)
    tag=$(get_arg -tag)
    [ -n "$tag" ] && instance_id=$(bkjs ec2-show -tag $tag -fmt id | head -1)
    instance_id=$(get_arg -instance-id $instance_id)
    name=$(get_arg -name)
    prefix=$(get_arg -prefix)
    [ -n "$(get_flag -force)" ] && force="-force"
    $BKJS_BIN shell -no-db -ipc-none -aws-create-image -wait $force -instance-id $instance_id -name "$name" -prefix "$prefix"
    exit
    ;;

  ec2-create-launch-template-version)
    name=$(get_arg -name)
    skip=$(get_arg -skip)
    image=$(get_arg -image-name)
    if [ -z "$name" ]; then
        tag=$(get_arg -tag)
        key=$(get_arg -key Name)
        [ "$tag" != "" ] && filter="--filter Name=tag:$key,Values=${tag}"
        name=$(aws ec2 describe-launch-templates $filter --query 'LaunchTemplates[*].LaunchTemplateName' --output text|sed 's/\t/\n/g'|sort|uniq)
    fi
    for c in $name; do
        for s in $skip; do
            [ "$c" = "$s" ] && c=""
        done
        [ -z "$c" ] && continue
        $BKJS_BIN shell -no-db -ipc-none -aws-create-launch-template-version -name $c -image-name "$image"
    done
    exit
    ;;

  ec2-build-ami)
    ami=$(get_arg -ami ami-036e04f38993310a3)
    tag=$(get_arg -tag ec2-ami-$(date +%s))
    type=$(get_arg -instance-type t4g.micro)
    size=$(get_arg -dev-size 10)

    INFO=$($BKJS_BIN shell -no-db -ipc-none -aws-launch-instances -name $tag -image-id $ami -instance-type $type -dev-size $size -public-ip -wait)
    echo "$INFO"

    INSTANCE_INFO=$(echo "$INFO"|egrep -E "^EC2-Instance:")
    INSTANCE_ID=$(echo "$INSTANCE_INFO"|cut -d' ' -f2)
    INSTANCE_HOST=$(echo "$INSTANCE_INFO"|cut -d' ' -f3)
    [ -z "$INSTANCE_HOST" ] && echo "no instance host detected" && exit 1

    # Remove existing host due to recyling in the same VPC
    hosts=~/.ssh/known_hosts
    if [ -n "$(grep -s "^$INSTANCE_HOST " $hosts)" ]; then
        mv $hosts $hosts.old
        grep -v "^$INSTANCE_HOST " $hosts.old > $hosts
        chmod 644 $hosts
    fi

    INSTANCE_USER=$(get_arg -ami-user alpine)

    echo "Connecting to $INSTANCE_ID as $INSTANCE_USER@$INSTANCE_HOST"
    run_ssh_cmd $INSTANCE_HOST $INSTANCE_USER "uname -s" Linux
    [ "$?" != "0" ] && exit 1

    # Run the hooks to do the actual work now
    INSTANCE_IP=$(echo "$INSTANCE_INFO"|cut -d' ' -f4)
    INSTANCE_ARCH=$(echo "$INSTANCE_INFO"|cut -d' ' -f5)
    INSTANCE_TAG=$(echo "$INSTANCE_INFO"|cut -d' ' -f6)
    run_bkjs_cmd $BKJS_CMD-hook 1
    exit
    ;;

  ec2-build-ami-hook)
    # Default hooks to build Alpine image
    ssh $INSTANCE_USER@$INSTANCE_HOST "doas apk add git && git clone --depth=1 https://github.com/vseryakov/backendjs.git && doas backendjs/bkjs setup-ec2 && doas reboot"
    echo
    echo "now you can ssh into $INSTANCE_ID AS ec2-user@$INSTANCE_HOST"
    exit
    ;;
    
esac
