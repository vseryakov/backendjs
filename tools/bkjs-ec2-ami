#!/bin/sh

case "$BKJS_CMD" in

  help|ec2-help)
    echo
    echo "  ec2-create-ami [-tag NAME] [-prefix PREFIX] - create a new AMI from the given running instance by tag or the current instance"
    echo "  ec2-create-launch-template-version [-name NAME] [-tag TAG] [-skip A B] [-image-name *] - create new launch template verson with the latest AMI, if no -name is given all existing templates matched by tag if given will be updated"
    echo "  ec2-build-ami - [-image-id ID] [-image-name N] [-ssh-user alpine] - build a new AMI for Alpine Linux, runs alpine-build-ami-hook for actual setup, uses -aws-launch-instance, either -image-id or -image-name is required"
    echo "  ec2-build-ami-hook - actual new AMI build script after it is launched and ssh is ready: INSTANCE_USER, INSTANCE_HOST, INSTANCE_ID, INSTANCE_IP, INSTANCE_ARCH are set"
    ;;

  ec2-create-ami)
    tag=$(get_arg -tag)
    [ -n "$tag" ] && instance_id=$(bkjs ec2-show -tag $tag -fmt id | head -1)
    instance_id=$(get_arg -instance-id $instance_id)
    $BKJS_BIN shell -no db,ipc -aws-create-image -wait -instance-id $instance_id $(get_all_args "-instance-id -tag")
    exit
    ;;

  ec2-create-launch-template-version)
    name=$(get_arg -name)
    skip=$(get_arg -skip)
    if [ -z "$name" ]; then
        tag=$(get_arg -tag)
        key=$(get_arg -key Name)
        [ "$tag" != "" ] && filter="--filter Name=tag:$key,Values=${tag}"
        name=$(aws ec2 describe-launch-templates $filter --query 'LaunchTemplates[*].LaunchTemplateName' --output text|sed 's/\t/\n/g'|sort|uniq)
    fi
    for c in $name; do
        if list_has $c $skip; then continue; fi
        $BKJS_BIN shell -no db,ipc -aws-create-launch-template-version -name $c $(get_all_args "-name -skip -tag -key")
    done
    exit
    ;;

  ec2-build-ami)
    INSTANCE_USER=$(get_arg -ssh-user alpine)
    $BKJS_BIN ec2-launch-instance -ssh-user "$INSTANCE_USER" $(get_all_args "-ssh-user")
    [ "$?" != "0" ] && exit 1

    # Run the hooks to do the actual work now
    run_bkjs_cmd $BKJS_CMD-hook 1
    exit
    ;;

  ec2-build-ami-hook)
    # Default hooks to build Alpine image
    ssh $INSTANCE_USER@$INSTANCE_HOST "doas apk add git && git clone --depth=1 https://github.com/vseryakov/backendjs.git && doas backendjs/bkjs setup-ec2 && doas reboot"
    echo
    echo "now you can ssh into $INSTANCE_ID AS ec2-user@$INSTANCE_HOST"
    exit
    ;;
    
esac
