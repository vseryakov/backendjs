#!/bin/sh
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#

case "$BKJS_CMD" in

  help|opensearch-help)
    echo ""
    echo "  opensearch-get [-force] [-ec2] [-local] - install local opensearch server in $BKJS_HOME/opensearch"
    echo "  opensearch-init - download and install local opensearch, start the server, configure monit"
    echo "  opensearch-run [-memsize PERCENT] [-memmax SIZE] [-nodetype TYPE] - run local opensearch server installed in $BKJS_HOME/opensearch, -memmax is max heap size, -memsize is the percent of the total memory to use, -nodetype can be node,master,data,client"
    echo "  opensearch-stop - stop local opensearch server"
    echo "  opensearch-upgrade-node - rolling upgrade of a node with new version"
    echo "  opensearch-reset - remove local opensearch database and restart the server"
    echo "  opensearch-init-monit [-memsize PERCENT] [-memmax SIZE] [-nodetype TYPE] - setup monit to keep opensearch service running"
    ;;

  opensearch-get)
    [ "$OPENSEARCH_PREFIX" = "" ] && OPENSEARCH_PREFIX=$BKJS_HOME/opensearch
    [ "$(get_flag -force)" != "" -a "$OPENSEARCH_PREFIX" != "" ] && rm -rf $OPENSEARCH_PREFIX
    if [ ! -d $OPENSEARCH_PREFIX ]; then
        mkdir -p $OPENSEARCH_PREFIX
        platform=$(to_lower $PLATFORM)
        case $OS_ARCH in
          amd64)
            platform="$platform-x64"
            ;;
          *)
            platform="$platform-$OS_ARCH"
            ;;
        esac
        ver=$(get_arg -vesion 2.13.0)
        tar=opensearch-min--$ver-$platform.tar.gz
        if [ ! -f $tar ]; the
            curl -L https://artifacts.opensearch.org/releases/core/opensearch/$tar
        fi
        tar -C $OPENSEARCH_PREFIX --strip-components=1 -xzf $tar
        [ "$?" != "0" ] && exit 1
        rm -rf $tar
        cd $OPENSEARCH_PREFIX
        cfg=config/opensearch.yml
        echo "node.roles: [master,data]" >> $cfg
        echo "path.data: $BKJS_HOME/var" >> $Cfg
        echo "path.logs: $BKJS_HOME/log" >> $cfg
        echo "action.destructive_requires_name: true" >> $cfg
        echo 'plugins.security.disabled: true' >> $cfg

        if [ -n "$(get_flag -local)" ]; then
            echo "network.host: 0.0.0.0" >> $cfg
            echo "discovery.type: single-node" >> $cfg
        fi

        if [ -n "$(get_flag -ec2)" ]; then
            echo 'network.host: ["_ec2_","_local_"]' >> $cfg
            echo 'discovery.seed_providers: ec2' >> $cfg
            echo 'cloud.node.auto_attributes: true' >> $cfg
            echo 'cluster.routing.allocation.awareness.attributes: aws_availability_zone' >> $cfg
            bin/opensearch-plugin install discovery-ec2 -b
        fi
    fi
    exit
    ;;

  opensearch-init)
    ($0 opensearch-get $(get_all_args))
    ($0 opensearch-run $(get_all_args))
    if [ "$PLATFORM" = "Linux" ]; then
       sudo $0 opensearch-init-monit $(get_all_args)
    fi
    exit
    ;;

  opensearch-run)
    [ "$OPENSEARCH_PREFIX" = "" ] && OPENSEARCH_PREFIX=$BKJS_HOME/opensearch
    # Percent from the total memory
    memsize=$(get_arg -memsize)
    [ -n "$memsize" ] && memmax="$(( ($(free -m|grep Mem:|awk '{print $2}') * $memsize) / 100 ))m"
    memmax=$(get_arg -memmax $memmax)
    if [ -n "$memmax" ]; then
       $SED "s/^-Xms.+/-Xms$memmax/" $OPENSEARCH_PREFIX/config/jvm.options
       $SED "s/^-Xmx.+/-Xmx$memmax/" $OPENSEARCH_PREFIX/config/jvm.options
       mkdir -p $OPENSEARCH_PREFIX/config/jvm.options.d/
       echo "-Xms$memmax" > $OPENSEARCH_PREFIX/config/jvm.options.d/bkjs.options
       echo "-Xmx$memmax" >> $OPENSEARCH_PREFIX/config/jvm.options.d/bkjs.options
    fi
    case "$(get_arg -nodetype)" in
    node)
      $SED -e "s/^node.roles.+$/node.roles: [master,data]/" $OPENSEARCH_PREFIX/config/opensearch.yml
      ;;
    master)
      $SED -e "s/^node.roles.+$/node.roles: [master]/" $OPENSEARCH_PREFIX/config/opensearch.yml
      ;;
    data)
      $SED -e "s/^node.roles.+$/node.roles: [data]/" $OPENSEARCH_PREFIX/config/opensearch.yml
      ;;
    client)
      $SED -e "s/^node.roles.+$/node.roles: []/" $OPENSEARCH_PREFIX/config/opensearch.yml
      ;;
    any)
      $SED -e "s/^node.roles.+$/node.roles: [master,data,ingest,ml,transform]/" $OPENSEARCH_PREFIX/config/opensearch.yml
      ;;
    esac
    $OPENSEARCH_PREFIX/bin/opensearch -p $BKJS_HOME/var/opensearch.pid -d >>$BKJS_HOME/log/message.log 2>&1
    exit
    ;;

  opensearch-stop)
    pkill -f org.opensearch
    exit
    ;;

  opensearch-restart)
    pkill -f org.opensearch
    sleep 1
    pkill -f -9 org.opensearch
    $0 opensearch-run $(get_all_args)
    exit
    ;;

  opensearch-reset)
    pkill -f org.opensearch
    rm -rf $BKJS_HOME/var/nodes
    rm -f $BKJS_HOME/log/opensearch*
    $0 opensearch-run
    exit
    ;;

  opensearch-upgrade-node)
    host=$(get_arg -host localhost)
    memsize=$(get_arg -memsize 50)
    nodetype=$($get_arg -nodetype)
    $0 es-stop-replication -host $host
    $0 opensearch-stop
    $0 opensearch-get -force
    $0 opensearch-run -nodetype "$nodetype" -memsize $memsize
    $0 es-start-replication -host $host
    exit
    ;;

  opensearch-init-monit)
    echo "check process opensearch with pidfile \"$BKJS_HOME/var/opensearch.pid\" start program = \"$BKJS_BIN opensearch-run $(get_all_args)\" as uid $BKJS_USER stop program = \"$BKJS_BIN opensearch-stop\" if failed url http://127.0.0.1:9200/ with timeout 15 seconds for 2 cycles then restart" > /etc/monit.d/opensearch.conf
    echo "check file opensearch-log with path $BKJS_HOME/log/opensearch.log if match 'java.lang.OutOfMemoryError' then exec \"$BKJS_BIN restart-opensearch $(get_all_args)\"" >> /etc/monit.d/opensearch.conf
    exit
    ;;

  opensearch-init-monit-health)
    host=$(get_arg -host opensearch)
    echo "check host opensearch-health with address $host if failed url http://$host:9200/_cluster/health and content = 'green' with timeout 60 seconds for 2 cycles then alert" > /etc/monit.d/opensearch-health.conf
    exit
    ;;

esac

