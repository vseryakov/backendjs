#!/bin/bash

case "$BKJS_CMD" in
  test-all)
    nolog=-no-log-filter
    log=$(get_arg -log none)
    [ $log != none ] && nolog=""
    skip=$(get_arg -skip)
    filter=$(get_arg -filter)
    path=$(get_arg -path)
    [ "$path" != "" ] && cd $path
    test=$(get_arg -test .)
    files=$(find tests -name '*.js')
    [ "$?" != "0" ] && exit 1
    err=0
    for file in $files; do
        [[ $file =~ tests/_ ]] && continue
        fn=$path/$file
        [[ ! -z $skip && $fn =~ $skip ]] && continue
        [[ ! -z $filter && ! $fn =~ $filter ]] && continue
        $0 test-$(basename $file .js) -test $test -log $log $nolog $(get_all_args "-log -path -skip -filter -test")
        [ "$?" != "0" ] && err=1
    done
    exit $err
    ;;

  test-*)
    file=$(echo $BKJS_CMD | sed 's/^test-//')
    tests=$(pwd)/tests
    [ ! -f tests/$file.js ] && echo "$tests/$file.js is not found" && exit 1
    test=$(get_arg -test $file)
    config=$(get_arg -test-config)
    exec $0 shell -test-config $config,$tests/config,$tests/config.$file -test-file $tests/$file.js -run-ipc -run-api -run-worker $(get_all_args "-test -test-config") -test-run $test
    ;;

  run-tests)
    path=$(get_arg -path .)
    dirs=$(find "$path" -name tests -type d)
    [ "$?" != "0" ] && exit 1
    err=0
    for d in $dirs; do
        ($0 test-all -path $(dirname $d) $(get_all_args "-path"))
        [ "$?" != "0" ] && err=1
    done
    exit $err
    ;;

  help)
    echo ""
    echo "Testing commands:"
    echo "  test-all [-path P] [-skip F] [-filter F] [-log L] - run all tests in the local tests/ folder, skip/filter control which files to run"
    echo "  test-FILE [-path P] [-test NAME] [-test-config C] - run a test function test-NAME in the script file tests/FILE.js"
    echo "  run-tests [-path P] [-skip F] [-filter F] [-test-config C] - run all tests for all packages, skip/filter can control what to run/skip"
    echo ""
    echo ""
    ;;
esac

