#!/bin/sh

case "$BKJS_CMD" in

  help|alpine-help)
    echo
    echo "  alpine-abuild -file APKBUILD [-checksum] [-reindex] [-local] [-src .] [-repo REPO] [-image abuild] [-pkgver VER|PATH] [-pkgname N] [-sync S3] [-force] [-noexit] [-i] [-arch A] [-docker args] - build a package with alpine docker. Place the .apk into -repo folder and -sync to S3 if provided"
    echo "  alpine-run-abuild -name N [-pkgname PKG] [-repo /repo] [-src /src] [-tmp /tmp] - call abuild for given APKBUILD.N file, place in -repo dir and run inside -tmp dir"
    echo "  alpine-prepare-abuild [-alpine 3.20] - build Docker image abuild for faster builds"
    echo "  alpine-reindex [-repo R] - rebuild index using local abuild"
    echo
    ;;

  alpine-abuild)
    file=$(get_arg -file)
    if [ -z "$file" -o ! -f "$file" ]; then
        [ -z "$(get_flag -reindex)" ] && echo "-file is required and must exist" && exit 1
        # reindex does not need a real build file
        file=/dev/null
    fi

    repo=$(get_arg -repo ${BKJS_APKDIR:-$HOME/alpine})
    mkdir -p $repo

    file=$(readlink -f $file)
    src=$(readlink -f $(get_arg -src .))

    args=$(get_all_args "-file -repo -image -docker -pkgver")

    # Special case for version from package.json
    pkgver=$(get_flag -pkgver)
    if [ -n "$pkgver" ]; then
        if [ "$pkgver" = "1" ]; then
            pkgver=$(get_json_flat package.json version)
        elif match $pkgver /; then
            pkgver=$(get_json_flat $pkgver version)
        fi
        [ -n "$pkgver" ] && args="$args -pkgver $pkgver"
    fi

    if [ -n "$(get_flag -local)" ]; then
        $BKJS_BIN alpine-run-abuild $args -file "$file" -repo "$repo" -src "$src"
    else
        bkjs=
        [ -f $src/bkjs ] && bkjs=bkjs
        [ -z "$bkjs" -a -f $src/bin/bkjs ] && bkjs=bin/bkjs
        [ -z "$bkjs" -a -f $src/packages/backendjs/bkjs ] && bkjs=packages/backendjs/bkjs
        [ -z "$bkjs" ] && echo "bkjs is not found in $src" && exit 1

        # Custom docker run args
        dargs=$(get_arg -docker)

        # No interactive mode by default for CI runners
        [ -n "$(get_flag -i)" -o -n "$(get_flag -noexit)" ] && dargs="$dargs -ti"

        arch=$(get_arg -arch)
        [ -n "$arch" ] && dargs="$dargs --platform=linux/$arch"

        dargs="$dargs -v $HOME/.abuild:/root/.abuild -v $file:/APKBUILD -v $src:/src -v $repo:/repo"

        image=$(get_arg -image abuild)

        docker run --rm $dargs $image /src/$bkjs alpine-run-abuild -tools /src/tools $args
    fi

    [ "$?" != "0" ] && exit 2

    if [ -d $repo ]; then
        sync=$(get_arg -sync "$BKJS_APKSYNC")
        for s in $sync; do
            case $s in
            s3:*)
              aws s3 sync $repo/ $s --delete
              ;;
            esac
        done
    fi
    exit
    ;;

  alpine-run-abuild)
	file=$(get_arg -file APKBUILD)
    repo=$(get_arg -repo /repo)
    tmp=$(get_arg -tmp /tmp)

    # Required dependencies
    if [ "$(whoami)" = "root" ]; then
        apk add --update-cache alpine-sdk coreutils cmake doas-sudo-shim
    fi

    # generate new abuild key if not set
    if ! grep -sq "^PACKAGER_PRIVKEY=" "$HOME"/.abuild/abuild.conf; then
        abuild-keygen -n -a
    fi

    if [ "$(whoami)" = "root" ]; then
        cp -v "$HOME"/.abuild/*.rsa.pub /etc/apk/keys/
        apk -U upgrade
    fi

    # Update index using fake build file and exit
    if [ -n "$(get_flag -reindex)" ]; then
        $BKJS_BIN alpine-reindex -repo $repo
        exit
    fi

    cp $file $tmp/APKBUILD
    [ "$?" != "0" ] && echo "invalid $file" && exit 1

    cd $tmp

    # Update checksum and exit
    if [ -n "$(get_flag -checksum)" ]; then
        abuild -F checksum
        cat APKBUILD
        exit
    fi

    # Build with a custom name/version, for a different branch for example
    pkgname=$(get_arg -pkgname)
    if [ -n "$pkgname" ]; then
        $SED "s/^pkgname=.+/pkgname=$pkgname/" APKBUILD
    fi
    pkgver=$(get_arg -pkgver)
    if [ -n "$pkgver" ]; then
        $SED "s/^pkgver=.+/pkgver=$pkgver/" APKBUILD
    fi

    if [ -n "$(get_flag -force)" ]; then
        pkgfile=$(source APKBUILD && echo $pkgname-$pkgver-r$pkgrel.apk)
        if [ -n "$pkgfile" ]; then
            msg Rebuilding $repo/$MACHINE/$pkgfile ...
            rm -f $repo/$MACHINE/$pkgfile
        fi
    fi

    # Top source directory for build scripts
    src=$(get_arg -src)
    if [ -n "$src" ]; then
        src=$(readlink -f $src)
        export BKJS_SRC=$src
    fi

    # Inside docker no point to cleanup if container is destroyed anyway
    [ -f /.dockerenv ] && keep="-kK"

    abuild -P $repo -rF $keep
    rc=$?

    [ -n "$(get_flag -noexit)" ] && echo "Starting shell.." && /bin/sh -i
    exit $rc
    ;;

  alpine-prepare-abuild)
    alpine=$(get_arg -alpine 3.20)
    docker build --no-cache --rm -t abuild --build-arg=ALPINE=$alpine -f $BKJS_DIR/tools/docker/Dockerfile.abuild .
    exit
    ;;

  alpine-reindex)
    repo=$(get_arg -repo ${BKJS_APKDIR:-$HOME/alpine})
    echo -e "pkgname=fake\npkgver=0.0.0\npkgrel=0\npkgdesc=fake\narch=noarch\n" > /tmp/APKBUILD
    (cd /tmp && abuild -P $repo -F -f index)
    exit
    ;;

esac
