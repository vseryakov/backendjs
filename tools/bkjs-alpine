#!/bin/sh

case "$BKJS_CMD" in

  help|alpine-help)
    echo
    echo "  alpine-abuild -file APKBUILD [-src .] [-repo REPO] [-image abuild] [-pkgver V] [-pkgname N] [-sync S3] [-checksum] [-force] [-noexit] [-i] [-arch A] [-docker args] - build a package with alpine docker. Place the .apk into -repo folder and -sync to S3 if provided"
    echo "  alpine-run-abuild -name N [-pkgname PKG] [-repo /repo] [-src /src] [-tmp /tmp] - call abuild for given APKBUILD.N file, place in -repo dir and run inside -tmp dir"
    echo "  alpine-prepare-abuild - build Docker image abuild for faster builds"
    echo
    ;;

  alpine-abuild)
    file=$(get_arg -file)
    [ -z "$file" -o ! -f "$file" ] && echo "-file is required and must exist" && exit 1

    repo=$(get_arg -repo ${BKJS_APKDIR:-$HOME/alpine})
    mkdir -p $repo

    file=$(readlink -f $file)
    src=$(readlink -f $(get_arg -src .))

    # Custom docker run args
    dargs=$(get_arg -docker)

    # No interactive mode by default for CI runners
    [ -n "$(get_flag -i)" -o -n "$(get_flag -noexit)" ] && dargs="$dargs -ti"

    arch=$(get_arg -arch)
    [ -n "$arch" ] && dargs="$dargs --platform=linux/$arch"

    dargs="$dargs -v $HOME/.abuild:/root/.abuild -v $file:/APKBUILD -v $src:/src -v $repo:/repo"

    image=$(get_arg -image abuild)

    cmd=$(get_arg -cmd)
    if [ -z "$cmd" ]; then
    	bkjs=
        [ -f $src/bkjs ] && bkjs=bkjs
        [ -z "$bkjs" -a -f $src/bin/bkjs ] && bkjs=bin/bkjs
        [ -z "$bkjs" -a -f $src/packages/backendjs/bkjs ] && bkjs=packages/backendjs/bkjs
        [ -z "$bkjs" ] && echo "bkjs is not found in $src" && exit 1
        cmd="/src/$bkjs alpine-run-abuild -tools /src/tools"

        # Special case for version from package.json
        pkgver=$(get_flag -pkgver)
        if [ -n "$pkgver" ]; then
            [ "$pkgver" = "1" ] && pkgver=$(get_json_flat package.json version)
            [ -n "$pkgver" ] && cmd="$cmd -pkgver $pkgver"
        fi

        cargs=$(get_all_args "-file -repo -image -docker -pkgver")
    fi

    docker run --rm $dargs $image $cmd $cargs
    [ "$?" != "0" ] && exit 2

    if [ -d $repo ]; then
        sync=$(get_arg -sync "$BKJS_APKSYNC")
        for s in $sync; do
            case $s in
            s3:*)
              aws s3 sync $repo/ $s
              ;;
            esac
        done
    fi
    exit
    ;;

  alpine-run-abuild)
	file=$(get_arg -file APKBUILD)
    repo=$(get_arg -repo /repo)
    tmp=$(get_arg -tmp /tmp)

    # Required dependencies
    apk add --update-cache alpine-sdk coreutils cmake sudo

    # generate new abuild key if not set
    if ! grep -sq "^PACKAGER_PRIVKEY=" "$HOME"/.abuild/abuild.conf; then
        USER=alpine abuild-keygen -n -a
    fi
    cp -v "$HOME"/.abuild/*.rsa.pub /etc/apk/keys/

    apk -U upgrade -a

    cp $file $tmp/APKBUILD
    [ "$?" != "0" ] && echo "invalid $file" && exit 1

    cd $tmp

    # Update checksum and exit
    if [ -n "$(get_flag -checksum)" ]; then
        abuild -F checksum
        exit
    fi

    # Build with a custom name/version, for a different branch for example
    pkgname=$(get_arg -pkgname)
    if [ -n "$pkgname" ]; then
        $SED "s/^pkgname=.+/pkgname=$pkgname/" APKBUILD
    fi
    pkgver=$(get_arg -pkgver)
    if [ -n "$pkgver" ]; then
        $SED "s/^pkgver=.+/pkgver=$pkgver/" APKBUILD
    fi

    if [ -n "$(get_flag -force)" ]; then
        pkgfile=$(source APKBUILD && echo $pkgname-$pkgver-r$pkgrel.apk)
        if [ -n "$pkgfile" ]; then
            msg Rebuilding $repo/$MACHINE/$pkgfile ...
            rm -f $repo/$MACHINE/$pkgfile
        fi
    fi

    abuild -P $repo -rFkK
    rc=$?

    [ -n "$(get_flag -noexit)" ] && echo "Starting shell.." && /bin/sh -i
    exit $rc
    ;;

  alpine-prepare-abuild)
    docker build --no-cache --rm -t abuild -f $BKJS_DIR/tools/docker/Dockerfile.abuild .
    exit
    ;;

esac
