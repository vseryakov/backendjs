#!/bin/sh
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#

case "$BKJS_CMD" in

  setup-ec2)
    $0 setup-server -user ec2-user -home /home/ec2-user -prefix /home/ec2-user $(get_all_args "-user -home -prefix")
    exit
    ;;

  setup-server)
    [ "$(whoami)" != "root" ] && echo "Run as root please" && exit 1
    args=$(get_all_args)
    find_user
    find_nodebin
    echo "Setuping server in $BKJS_HOME for $BKJS_USER/$(get_arg -user), prefix: $BKJS_PREFIX, binaries: $NODE_BIN, $BKJS_BIN... ($args)"

    ($0 setup-packages $args)
    ($0 setup-hostname $args)
    ($0 setup-ssh $args)
    ($0 setup-user $args)
    ($0 setup-limits $args)
    ($0 setup-sysctl $args)
    ($0 setup-logrotate $args)
    ($0 setup-rsyslog $args)
    ($0 setup-profile $args)
    ($0 setup-home $args)
    ($0 setup-service $args -bin $BKJS_HOME/bin/$BKJS)
    ($0 monit-init-system $args)

    if [ "$OS_TYPE" = "alpine" ]; then
        rc-update add sshd
        rc-update add crond

        if [ -z "$(grep -s monit /etc/inittab)" ]; then
            echo "::respawn:/usr/bin/monit -I" >> /etc/inittab
        fi

        # Force to gen SSH keys for new user
        /sbin/tiny-cloud --bootstrap status --bootstrap incomplete
    fi
    exit
    ;;

   setup-profile)
    # Create global profile
    find_user
    sysconf=/etc/conf.d
    [ ! -d $sysconf -a -d /etc/sysconfig ] && sysconf=/etc/sysconfig
    echo "BKJS_HOME=$BKJS_HOME" > $sysconf/$BKJS
    domain=$(get_arg -domain)
    [ -n "$domain" ] && echo "BKJS_DOMAIN=$domain" >> $sysconf/$BKJS
    [ "$BKJS_USER" != "root" ] && echo "BKJS_USER=$BKJS_USER" >> $sysconf/$BKJS
    exit
    ;;

  setup-hostname)
    host=$(get_arg -host $BKJS_HOST)
    [ -z "$host" ] && host=$(uname -n|awk -F. '{print $1}')
    domain=$(get_arg -domain $BKJS_DOMAIN)

    # Set hostname with name and domain
    if [ -z "$domain" ]; then
       host=$(get_arg -host)
       [ -z "$host" ] && exit
       domain=$(uname -n|cut -d. -f2-)
    fi
    host=$host.$domain
    [ "$(uname -n)" = "$host" ] && exit

    echo "Setting hostname to $host"
    hostname $host
    echo $host > /etc/hostname

    if [ -f /etc/sysconfig/network ]; then
       echo "HOSTNAME=$host" > /tmp/network
       grep -v HOSTNAME /etc/sysconfig/network >> /tmp/network
       mv /tmp/network /etc/sysconfig/network
    fi
    exit
    ;;

  setup-home)
    # Create required directories
    find_user

    mkdir -p $BKJS_HOME/node_modules $BKJS_HOME/bin $BKJS_HOME/log $BKJS_HOME/etc $BKJS_HOME/var
    (cd $BKJS_HOME/bin &&
       ln -sfn ../node_modules/backendjs/bkjs bkjs &&
       ln -sfn bkjs bksh &&
       ln -sfn bkjs bkrsync)
    chown -R $BKJS_USER $BKJS_HOME
    exit
    ;;

  setup-user)
    # Add local user
    find_user
    UHOME=/home/$BKJS_USER

    if [ "$(grep -s $BKJS_USER /etc/passwd)" = "" ]; then
        echo "Adding user $BKJS_USER"
        useradd -m -G wheel -s /bin/bash $BKJS_USER
        sh -c "echo '$BKJS_USER:*' | /usr/sbin/chpasswd -e"
        mkdir -p -m 700 $UHOME/.ssh && chown $BKJS_USER $UHOME/.ssh
    fi

    if [ -f /etc/tiny-cloud.conf ]; then
        $SED "s/^#?CLOUD_USER=.+/CLOUD_USER=$BKJS_USER/" /etc/tiny-cloud.conf
    fi

    if [ -d /etc/doas.d -a ! -f /etc/doas.d/wheel.conf ]; then
        echo "permit nopass :wheel" >> /etc/doas.d/wheel.conf
    fi

    # Allow path in sudo and skip tty for our user so we can run commands via ssh
    if [ -d /etc/sudoers.d -a ! -f /etc/sudoers.d/$BKJS ]; then
        echo "Defaults secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:$BKJS_PREFIX/bin:$UHOME/bin:$UHOME/node_modules/.bin" >> /etc/sudoers.d/$BKJS
        echo "Defaults:$BKJS_USER !requiretty" >> /etc/sudoers.d/$BKJS
        echo "$BKJS_USER ALL = NOPASSWD: ALL" >> /etc/sudoers.d/$BKJS
    fi

    # Aliases and environment
    if [ "$(grep -s '#Bkjs' $UHOME/.bashrc)" = "" ]; then
       echo "Configuring .bashrc..."
       echo '#Bkjs' >> $UHOME/.bashrc
       echo "umask 022" >> $UHOME/.bashrc
       echo "BKJS_HOME=$BKJS_HOME" >> $UHOME/.bashrc
       echo "export PATH=\$PATH:$UHOME/bin:$UHOME/node_modules/.bin" >> $UHOME/.bashrc
       echo 'alias slog="tail -100 /var/log/messages"' >> $UHOME/.bashrc
       echo "alias clog=\"sudo tail -100 /var/log/cron\"" >> $UHOME/.bashrc
       echo "alias mlog=\"tail -100 $BKJS_HOME/log/message.log\"" >> $UHOME/.bashrc
       echo "alias elog=\"tail -100 $BKJS_HOME/log/error.log\"" >> $UHOME/.bashrc
       echo "alias alog=\"tail -100 $BKJS_HOME/log/access.log\"" >> $UHOME/.bashrc
       echo 'alias h="history"' >> $UHOME/.bashrc
       echo 'alias ll="ls -la"' >> $UHOME/.bashrc
       echo 'alias ps="ps augx"' >> $UHOME/.bashrc
       echo 'alias mc="mc -b"' >> $UHOME/.bashrc
       echo 'alias df="df -h"' >> $UHOME/.bashrc
       echo 'alias bkls="bkjs ec2-ls"' >> $UHOME/.bashrc
       echo 'alias d=docker' >> $UHOME/.bashrc
       echo 'alias g=git' >> $UHOME/.bashrc
       echo 'alias di="docker images"' >> $UHOME/.bashrc
       echo 'alias dexec="docker exec -ti"' >> $UHOME/.bashrc
       echo 'bcp() { socat readline,history=$HOME/.socat tcp4:localhost:$1; }' >> $UHOME/.bashrc
       echo 'bkssh() { bkjs ec2-ssh -tag "$1" -index "$2" -cmd "$3" -skip-tag dev; }' >> $UHOME/.bashrc
       echo 'bkw() { bkssh ${1-api} "" "w"; }' >> $UHOME/.bashrc
       echo "PROMPT_COMMAND='printf \"\\033]0;\$(cat \$HOME/var/bkjs.tag)\\007\"'" >> $UHOME/.bashrc
    fi

    if [ "$(grep -s bashrc $UHOME/.bash_profile)" = "" ]; then
        echo "Configuring .bash_profile .bashrc..."
        echo '[ -f ~/.bashrc ] && . ~/.bashrc' >> $UHOME/.bash_profile
    fi

    if [ "$(grep -s '#Bkjs' $UHOME/.bash_profile)" = "" ]; then
       echo "Configuring .bash_profile..."
       echo '#Bkjs' >> $UHOME/.bash_profile
       echo 'export HISTSIZE=500000' >> $UHOME/.bash_profile
       echo 'export HISTFILESIZE=50000000' >> $UHOME/.bash_profile
       echo '[ -f ~/etc/profile ] && . ~/etc/profile' >> $UHOME/.bash_profile
       echo '[ ! -s ~/var/bkjs.tag ] && bkjs ec2-tag > ~/var/bkjs.tag' >> $UHOME/.bash_profile
       echo '[ -s ~/var/bkjs.tag ] && export PS1=$(cat ~/var/bkjs.tag)#' >> $UHOME/.bash_profile
       echo '[ "$TMUX_PANE" != "" ] && PS1=$(echo $PS1|sed "s/#/${TMUX_PANE}#/")' >> $UHOME/.bash_profile
    fi
    exit
    ;;

  setup-ssh)
    # Allow only pubkey auth
    [ "$(grep -s '#Bkjs' /etc/ssh/sshd_config)" != "" ] && exit
    echo "Configuring ssh..."
    egrep -v '^(#Bkjs|PasswordAuth|GSSAPIAuth|MaxAuth|MaxSess|ClientAlive|PermitRootLogin)' /etc/ssh/sshd_config > /tmp/sshd_config
    echo "" >> /tmp/sshd_config
    echo "#Bkjs config" >> /tmp/sshd_config
    echo "PermitRootLogin no" >> /tmp/sshd_config
    echo "PasswordAuthentication no" >> /tmp/sshd_config
    echo "MaxAuthTries 10" >> /tmp/sshd_config
    echo "MaxSessions 10" >> /tmp/sshd_config
    echo "ClientAliveInterval 15" >> /tmp/sshd_config
    echo "ClientAliveCountMax 5" >> /tmp/sshd_config
    mv /tmp/sshd_config /etc/ssh
    chmod 600 /etc/ssh/sshd_config
    exit
    ;;

  setup-logrotate)
    # Setup logrotate for backend log files
    [ -f /etc/logrotate.d/syslog ] && rm /etc/logrotate.d/syslog
    if [ "$(grep -s '#Bkjs' /etc/logrotate.d/rsyslog)" = "" ]; then
       echo "Configuring logrotate..."
       echo "#Bkjs" > /etc/logrotate.d/rsyslog
       echo "/var/log/cron /var/log/messages {" >> /etc/logrotate.d/rsyslog
       echo " missingok" >> /etc/logrotate.d/rsyslog
       echo " daily" >> /etc/logrotate.d/rsyslog
       echo " rotate 90" >> /etc/logrotate.d/rsyslog
       echo " sharedscripts" >> /etc/logrotate.d/rsyslog
       echo " postrotate" >> /etc/logrotate.d/rsyslog
       echo "  /usr/bin/killall -q -HUP rsyslogd" >> /etc/logrotate.d/rsyslog
       echo " endscript" >> /etc/logrotate.d/rsyslog
       echo "}" >> /etc/logrotate.d/rsyslog
    fi
    if [ "$(grep -s "#Bkjs $BKJS_HOME" /etc/logrotate.d/$BKJS)" = "" ]; then
       echo "Configuring logrotate.d/$BKJS..."
       echo "#Bkjs $BKJS_HOME" > /etc/logrotate.d/$BKJS
       echo "$BKJS_HOME/log/message.log $BKJS_HOME/log/access.log {" >> /etc/logrotate.d/$BKJS
       echo " missingok" >> /etc/logrotate.d/$BKJS
       echo " daily" >> /etc/logrotate.d/$BKJS
       echo " rotate 90" >> /etc/logrotate.d/$BKJS
       echo " sharedscripts" >> /etc/logrotate.d/$BKJS
       echo " postrotate" >> /etc/logrotate.d/$BKJS
       echo "  /usr/bin/killall -q -HUP rsyslogd" >> /etc/logrotate.d/$BKJS
       echo " endscript" >> /etc/logrotate.d/$BKJS
       echo "}" >> /etc/logrotate.d/$BKJS
    fi
    exit
    ;;

  setup-syslog)
    # Setup syslog config for backend logging
    find_user

    if [ -z "$(grep -s '#Bkjs' /etc/syslog.conf)" ]; then
       echo "Configuring syslog..."
       echo "#Bkjs" > /etc/syslog.conf
       echo 'kern.*,*.emerg /dev/console' >> /etc/syslog.conf
       echo 'cron.* /var/log/cron' >> /etc/syslog.conf
       echo 'local7.* /var/log/boot.log' >> /etc/syslog.conf
       echo '*.info;cron.none,local0.none,local5.none /var/log/messages' >> /etc/syslog.conf
       echo "local0.* $BKJS_HOME/log/message.log" >> /etc/syslog.conf
       echo "local5.* $BKJS_HOME/log/access.log" >> /etc/syslog.conf
       mkdir -p $BKJS_HOME/log
       chown -R $BKJS_USER $BKJS_HOME/log
    fi
    exit
    ;;

  setup-rsyslog)
    # Setup rsyslog config for backend logging
    find_user

    if [ -z "$(grep -s '#Bkjs' /etc/rsyslog.conf)" ]; then
       echo "Configuring rsyslog..."
       echo "#Bkjs" > /etc/rsyslog.conf
       if [ -d /etc/systemd ]; then
          echo '$ModLoad imjournal' >> /etc/rsyslog.conf
       else
          echo '$ModLoad imklog' >> /etc/rsyslog.conf
       fi
       echo '$ModLoad imuxsock' >> /etc/rsyslog.conf
       echo '$ModLoad imudp' >> /etc/rsyslog.conf
       echo '$UDPServerAddress 127.0.0.1' >> /etc/rsyslog.conf
       echo '$UDPServerRun 514' >> /etc/rsyslog.conf
       echo '$MaxMessageSize 64k' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitInterval 0' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitBurst 0' >> /etc/rsyslog.conf
       echo '$ActionFileDefaultTemplate RSYSLOG_FileFormat' >> /etc/rsyslog.conf
       if [ -d /etc/systemd ]; then
          echo '$IMJournalStateFile imjournal.state' >> /etc/rsyslog.conf
          echo '$imjournalRatelimitInterval 0' >> /etc/rsyslog.conf
          echo '$imjournalRatelimitBurst 0' >> /etc/rsyslog.conf
          echo '$OmitLocalLogging on' >> /etc/rsyslog.conf
          echo '*.emerg :omusrmsg:*' >> /etc/rsyslog.conf
       else
          echo 'kern.*,*.emerg /dev/console' >> /etc/rsyslog.conf
       fi
       echo '$IncludeConfig /etc/rsyslog.d/*.conf' >> /etc/rsyslog.conf
       echo 'cron.* /var/log/cron' >> /etc/rsyslog.conf
       echo 'local7.* /var/log/boot.log' >> /etc/rsyslog.conf
       echo "\$FileOwner $BKJS_USER" >> /etc/rsyslog.conf
       echo '*.info;cron.none,local0.none,local5.none /var/log/messages' >> /etc/rsyslog.conf
       rm -rf /var/log/maillog* /var/log/secure* /var/log/spooler*
       touch /var/log/messages
       chown -R $BKJS_USER /var/log/messages

       if [ "$OS_TYPE" = "alpine" ]; then
          rc-update -a del syslog
          rc-update add rsyslog boot
       fi
    fi

    if [ -z "$(grep -s "#Bkjs $BKJS_HOME" /etc/rsyslog.d/$BKJS.conf)" ]; then
       echo "Configuring rsyslog.d/$BKJS ..."
       mkdir -p /etc/rsyslog.d
       echo "#Bkjs $BKJS_HOME" > /etc/rsyslog.d/$BKJS.conf
       echo "\$FileOwner $BKJS_USER" >> /etc/rsyslog.d/$BKJS.conf
       bkjsfmt=""
       if [ -d /etc/systemd ]; then
          echo '$template bkjsfmt,"%HOSTNAME% %msg%\n"' >> /etc/rsyslog.d/$BKJS.conf
          bkjsfmt=";bkjsfmt"
       fi
       echo "local0.* $BKJS_HOME/log/message.log$bkjsfmt" >> /etc/rsyslog.d/$BKJS.conf
       echo "local5.* $BKJS_HOME/log/access.log$bkjsfmt" >> /etc/rsyslog.d/$BKJS.conf
       mkdir -p $BKJS_HOME/log
       chown -R $BKJS_USER $BKJS_HOME/log
    fi
    exit
    ;;

  setup-limits)
    # File handles and coredumps for debugging
    if [ -d /etc/security/limits.d ]; then
        conf=/etc/security/limits.d/90-$BKJS.conf
        if [ ! -s $conf ]; then
            echo "Configuring limits..."
            echo '* soft core unlimited' > $conf
            echo '* hard core unlimited' >> $conf
            echo '* soft nofile 512000' >> $conf
            echo '* hard nofile 512000' >> $conf
            echo 'root soft nofile 512000' >> $conf
            echo 'root hard nofile 512000' >> $conf
            echo '* soft memlock unlimited' >> $conf
            echo '* hard memlock unlimited' >> $conf
            echo 'root soft memlock unlimited' >> $conf
            echo 'root hard memlock unlimited' >> $conf
            echo '* soft as unlimited' >> $conf
            echo '* hard as unlimited' >> $conf
            echo 'root soft as unlimited' >> $conf
            echo 'root hard as unlimited' >> $conf
        fi
    fi
    if [ -f /etc/rc.conf ]; then
        $SED 's/^#?rc_ulimit.*/rc_ulimit="-n 512000 -c unlimited -l unlimited"/' /etc/rc.conf
    fi
    if [ -f /etc/init.d/monit ]; then
        $SED 's/daemon $prog/ulimit -n 512000\n\tdaemon $prog/' /etc/init.d/monit
    fi
    if [ -f /etc/systemd/system.conf ]; then
        $SED 's/^#?DefaultLimitNOFILE=.*$/DefaultLimitNOFILE=512000/' /etc/systemd/system.conf
    fi
    exit
    ;;

  setup-sysctl)
    # System tuning
    conf=/etc/sysctl.d/90-$BKJS.conf
    [ -s $conf ] && exit
    echo "Configuring sysctl..."
    echo 'fs.file-max=512000' > $conf
    echo 'kernel.core_uses_pid=0' >> $conf
    echo 'vm.max_map_count=262144' >> $conf
    echo 'vm.min_free_kbytes=65536' >> $conf
    echo 'net.core.somaxconn=65536' >> $conf
    echo 'net.core.netdev_max_backlog=65536' >> $conf
    echo 'net.core.rmem_max=26214400' >> $conf
    echo 'net.core.wmem_max=26214400' >> $conf
    echo 'net.core.optmem_max=26214400' >> $conf
    echo 'net.ipv4.tcp_rfc1337=1' >> $conf
    echo 'net.ipv4.ip_local_port_range=2000 65000' >> $conf
    echo 'net.ipv4.tcp_max_tw_buckets=1440000' >> $conf
    echo 'net.ipv4.tcp_window_scaling=1' >> $conf
    echo 'net.ipv4.tcp_tw_reuse=1' >> $conf
    echo 'net.ipv4.tcp_fin_timeout=15' >> $conf
    echo 'net.ipv4.tcp_keepalive_intvl=15' >> $conf
    echo 'net.ipv4.tcp_keepalive_time=30' >> $conf
    echo 'net.ipv4.tcp_keepalive_probes=5' >> $conf
    echo 'net.ipv4.tcp_slow_start_after_idle=0' >> $conf
    echo 'net.ipv4.tcp_max_orphans=262144' >> $conf
    echo 'net.ipv4.tcp_max_syn_backlog=3240000' >> $conf
    echo 'net.ipv4.tcp_no_metrics_save=1' >> $conf
    echo 'net.ipv4.tcp_syn_retries=2' >> $conf
    echo 'net.ipv4.tcp_synack_retries=2' >> $conf
    echo 'net.ipv4.tcp_rmem=8192 87380 16777216' >> $conf
    echo 'net.ipv4.tcp_wmem=8192 65536 16777216' >> $conf
    echo 'net.ipv4.tcp_challenge_ack_limit = 999999999' >> $conf
    if [ "$(get_flag -noipv6)" != "" ]; then
        echo 'net.ipv6.conf.all.disable_ipv6 = 1' >> $conf
        echo 'net.ipv6.conf.default.disable_ipv6 = 1' >> $conf
        echo 'net.ipv6.conf.lo.disable_ipv6 = 1' >> $conf
    fi
    sysctl -p $conf
    exit
    ;;

  setup-service)
    # Install service for a script or bkjs service
    find_user
    if [ -z "$(get_flag -stop)" ]; then
        bin=$(get_arg -bin $BKJS_BIN)

        echo "Starting service $BKJS with $bin"

        case $OS_TYPE in
          alpine)
            conf=/etc/init.d/$BKJS
            echo -e "#!/sbin/openrc-run\nname=\"$BKJS\"\ndepend() {\n\need net\n}\nstart() {\n\t$bin start\n}" > $conf
            chmod 755 $conf
            rc-update add $BKJS boot
            ;;

          *)
            [ ! -d /etc/init.d ] && echo "SysV init scripts are not supported" && exit
            ln -sfn $bin /etc/init.d/$BKJS
            ln -sfn /etc/init.d/$BKJS /etc/rc5.d/S31$BKJS
            ;;
        esac
    else
        echo "Stopping service $BKJS"
        case $OS_TYPE in
          alpine)
            rc-update del $BKJS
            ;;

          *)
            rm -f /etc/init.d/$BKJS /etc/rc5.d/S31$BKJS
            ;;
        esac
        $0 stop
    fi
    exit
    ;;

  setup-mfa)
    [ "$(whoami)" != "root" ] && echo "Run as root please" && exit 1
    case "$OS_TYPE" in
      alpine)
        apk add google-authenticator openssh-server-pam
        echo -e "account include base-account" > /etc/pam.d/sshd
        echo -e "auth required pam_env.so" >> /etc/pam.d/sshd
        echo -e "auth required pam_nologin.so successok" >> /etc/pam.d/sshd
        echo -e "auth required /lib/security/pam_google_authenticator.so echo_verification_code grace_period=57600 nullok" >> /etc/pam.d/sshd
        echo -e "auth required pam_unix.so\tmd5 sha512" >> /etc/pam.d/sshd
        ln /etc/pam.d/sshd /etc/pam.d/sshd.pam
        $0 setup-limits
        ;;

      amazon)
        yum install google-authenticator –y
        if [ "$(egrep -s 'pam_google_authenticator' /etc/pam.d/sshd)" = "" ]; then
            $SED 's/^auth[ \t]+substack[ \t]+password-auth/auth required pam_google_authenticator.so\n#auth substack password-auth/' /etc/pam.d/sshd
        fi
        if [ "$(egrep -s 'pam_google_authenticator' /etc/pam.d/system-auth)" = "" ]; then
            $SED 's/^auth[ \t]+sufficient[ \t]+pam_unix.so nullok try_first_pass/auth requisite pam_unix.so nullok try_first_pass\nauth sufficient pam_google_authenticator.so/' /etc/pam.d/system-auth
        fi
        ;;
    esac
    echo >> /etc/ssh/sshd_config
    if [ "$(egrep -s '^UsePAM yes' /etc/ssh/sshd_config)" = "" ]; then
        $SED 's/^UsePAM/#UsePAM/' /etc/ssh/sshd_config
        echo 'UsePAM yes' >> /etc/ssh/sshd_config
    fi
    if [ "$(egrep -s '^ChallengeResponseAuthentication yes' /etc/ssh/sshd_config)" = "" ]; then
        $SED 's/^ChallengeResponseAuthentication/#ChallengeResponseAuthentication/' /etc/ssh/sshd_config
        echo 'ChallengeResponseAuthentication yes' >> /etc/ssh/sshd_config
    fi
    if [ "$(egrep -s '^AuthenticationMethods publickey,keyboard-interactive' /etc/ssh/sshd_config)" = "" ]; then
        $SED 's/^AuthenticationMethods/#AuthenticationMethods/' /etc/ssh/sshd_config
        echo 'AuthenticationMethods publickey,keyboard-interactive' >> /etc/ssh/sshd_config
    fi
    su $(get_arg -user ec2-user) -c "google-authenticator -d -t -f -r 2 -R 30"
    exit
    ;;

  setup-logwatcher)
    find_user
    cron=$(get_arg -cron "*/$(get_arg -interval 5) * * * *")
    echo 'MAILTO=""' > /etc/cron.d/$BKJS-logwatcher
    echo "$cron $BKJS_USER $BKJS_BIN logwatcher" >> /etc/cron.d/$BKJS-logwatcher
    exit
    ;;

  setup-packages)
    # Install required development and runtime packages

    # Linux distro specific actions
    case "$OS_TYPE" in
      alpine)
        ver=$(cat /etc/alpine-release|cut -d. -f1,2)
        $SED "s/^# *(.+v$ver\/community)\$/\1/" /etc/apk/repositories
        apk update
        apk add bash curl wget nano mc
        apk add make git gcc g++ cmake autoconf automake libtool man-pages
        apk add shadow doas doas-sudo-shim rsync socat
        apk add nodejs npm python3 openrc openssh monit rsyslog rsyslog-openrc redis
        apk add tiny-cloud tiny-cloud-aws tiny-cloud-openrc nvme-cli aws-cli
        ;;
    esac
    exit
    ;;

  help)
    echo ""
    echo "  setup-hostname [-host HOST] [-domain DOMAIN] - set the hostname"
    echo "  setup-user [-user NAME] - create a new user for the backend"
    echo "  setup-ssh - setup SSH permissions, allow only public key auth"
    echo "  setup-logrotate - setup logrotate for the backend log files"
    echo "  setup-rsyslog - setup rsyslog to use for the backend logging, access log and backend log"
    echo "  setup-system - setup system wide parameters, permissions"
    echo "  setup-limits - setup ulimits"
    echo "  setup-sysctl - setup sysctl parameters"
    echo "  setup-home - setup backend home with required folders"
    echo "  setup-mfa [-user ec2-user] - initialize EC2 instance with multi-factor authentication using Google authenticator"
    echo "  setup-logwatcher [-interval MINS] [-cron CRON] - creates a crontab file in /etc/cron.d to periodically run the log watcher, -cron can specify full cron time spec"
    echo "  setup-ec2 - setup server on EC2 instance in the ec2-user home"
    echo "  setup-service [-stop] - start/stop service to be run bkjs start on server boot"
    echo "  setup-packages - install required packages and updates for supported distros (Alpine)"
    echo "  setup-server [-user USER] [-home HOME] [-prefix $PREFIX] [-doman DOMAIN] [-host HOST] - setup the backend environment with packages and change system config files for production use (Amazon2, Alpine)"
    ;;

esac

