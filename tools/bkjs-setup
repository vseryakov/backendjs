#!/bin/sh
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#

case "$BKJS_CMD" in

  help|setup-help)
    echo ""
    echo "  setup-service [-stop] - start/stop service to be run bkjs start on server boot"
    echo "  setup-ec2 - setup server on EC2 instance in the ec2-user home"
    echo "  setup-server [-user USER] [-home HOME] [-doman DOMAIN] [-host HOST] - setup the backend environment with packages and change system config files for production use (Amazon2, Alpine)"
    echo "  setup-home [-dirs DIRS] - setup backend home with required folders, optional dirs will be created if given"
    echo "  setup-hostname [-host HOST] [-domain DOMAIN] - set EC2 hostname from IP and domain"
    echo "  setup-mfa [-user ec2-user] - initialize EC2 instance with multi-factor authentication using Google authenticator"
    echo "  setup-user [-user NAME] - create a new user for the backend"
    echo "  setup-ssh - setup SSH permissions, allow only public key auth"
    echo "  setup-rsyslog - setup rsyslog to use for the backend logging, access log and backend log"
    echo "  setup-rsyslog-docker - store all docker container logs in $BKJS_HOME/log/docker.log via syslog local1 facility"
    echo "  setup-system - setup system wide parameters, permissions"
    echo "  setup-limits - setup ulimits"
    echo "  setup-sysctl - setup sysctl parameters"
    echo "  setup-logrotate [-force] [-sysfiles F] [-logfiles F] - setup logrotate for the backend log files"
    echo "  setup-packages - install required packages and updates for supported distros (Alpine)"
    ;;

  setup-ec2)
    home=$(get_arg -home /home/ec2-user)
    $BKJS_BIN setup-server -user ec2-user -home $home $(get_all_args "-user -home")
    exit
    ;;

  setup-server)
    [ "$(whoami)" != "root" ] && echo "Run as root please" && exit 1
    args=$(get_all_args)
    msg "Setuping server in $BKJS_HOME ($args)"

    ($BKJS_BIN setup-packages $args)
    ($BKJS_BIN setup-user $args)
    ($BKJS_BIN setup-hostname $args)
    ($BKJS_BIN setup-ssh $args)
    ($BKJS_BIN setup-limits $args)
    ($BKJS_BIN setup-sysctl $args)
    ($BKJS_BIN setup-logrotate $args)
    ($BKJS_BIN setup-rsyslog $args)
    ($BKJS_BIN setup-profile $args)
    ($BKJS_BIN monit-init-system $args)
    ($BKJS_BIN setup-home $args)
    ($BKJS_BIN setup-service $args -bin $BKJS_HOME/bin/bkjs)
    ($BKJS_BIN setup-boot $args)
    exit
    ;;

  setup-boot)
    # Post setup actions

    case $OS_TYPE in
      alpine)
        rc-update add crond

        # Monit will start after all openrc levels
        if [ -z "$(grep -s monit /etc/inittab)" ]; then
        	echo -e '#!/bin/sh\nulimit -n 512000\nexec /usr/bin/monit -I\n' > /etc/init.d/rc.monit
        	chmod 755 /etc/init.d/rc.monit
            echo "::respawn:/etc/init.d/rc.monit" >> /etc/inittab
        fi

        # Force to gen SSH keys for new user
        /sbin/tiny-cloud --bootstrap incomplete
        ;;
    esac
    exit
    ;;

  setup-hostname)
    host=$(get_arg -host $BKJS_HOST)
    [ -z "$host" ] && host=$(uname -n|awk -F. '{print $1}')
    domain=$(get_arg -domain $BKJS_DOMAIN)

    # Set hostname with name and domain
    if [ -z "$domain" ]; then
       host=$(get_arg -host)
       [ -z "$host" ] && exit
       domain=$(uname -n|cut -d. -f2-)
    fi
    host=$host.$domain
    [ "$(uname -n)" = "$host" ] && exit

    msg "Setting hostname to $host"
    hostname $host
    echo $host > /etc/hostname

    if [ -f /etc/sysconfig/network ]; then
       echo "HOSTNAME=$host" > /tmp/network
       grep -v HOSTNAME /etc/sysconfig/network >> /tmp/network
       mv /tmp/network /etc/sysconfig/network
    fi
    exit
    ;;

   setup-profile)
    # Create global profile
    sysconf=/etc/conf.d
    [ ! -d $sysconf -a -d /etc/sysconfig ] && sysconf=/etc/sysconfig
    echo "export NODE_ENV=production" > $sysconf/bkjs
    echo "BKJS_HOME=$BKJS_HOME" >> $sysconf/bkjs
    domain=$(get_arg -domain)
    [ -n "$domain" ] && echo "BKJS_DOMAIN=$domain" >> $sysconf/bkjs
    [ "$BKJS_USER" != "root" ] && echo "BKJS_USER=$BKJS_USER" >> $sysconf/bkjs
    exit
    ;;

  setup-home)
    # Create required directories and set permissions
    dirs=$(get_arg -dirs)

    (mkdir -p $BKJS_HOME &&
        cd $BKJS_HOME &&
        mkdir -p bin etc node_modules log var tmp &&
        cd $BKJS_HOME/bin &&
        ln -sfn ../node_modules/backendjs/bkjs bkjs &&
        ln -sfn bkjs bksh &&
        ln -sfn bkjs bkrsync)

    for d in $dirs; do mkdir -p $BKJS_HOME/$d; done

    chown -R $BKJS_USER $BKJS_HOME
    exit
    ;;

  setup-user)
    # Add local user
    UHOME=/home/$BKJS_USER

    if [ "$(grep -s $BKJS_USER /etc/passwd)" = "" ]; then
        echo "Adding user $BKJS_USER"
        useradd -m -g wheel -G docker -s /bin/bash $BKJS_USER
        sh -c "echo '$BKJS_USER:*' | /usr/sbin/chpasswd -e"
        mkdir -p -m 700 $UHOME/.ssh && chown $BKJS_USER $UHOME/.ssh
    fi

    if [ -f /etc/tiny-cloud.conf ]; then
        $SED "s/^#?CLOUD_USER=.+/CLOUD_USER=$BKJS_USER/" /etc/tiny-cloud.conf
    fi

    if [ -d /etc/doas.d -a ! -f /etc/doas.d/wheel.conf ]; then
        echo "permit nopass :wheel" >> /etc/doas.d/wheel.conf
    fi

    # Allow path in sudo and skip tty for our user so we can run commands via ssh
    if [ -d /etc/sudoers.d -a ! -f /etc/sudoers.d/bkjs ]; then
        echo "Defaults secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:$UHOME/bin:$UHOME/node_modules/.bin" >> /etc/sudoers.d/bkjs
        echo "Defaults:$BKJS_USER !requiretty" >> /etc/sudoers.d/bkjs
        echo "$BKJS_USER ALL = NOPASSWD: ALL" >> /etc/sudoers.d/bkjs
    fi

    # Aliases and environment
    if [ "$(grep -s '#Bkjs' $UHOME/.bashrc)" = "" ]; then
        log=$UHOME/.bashrc
        echo "Configuring $log..."
        echo '#Bkjs' >> $log
        echo "umask 022" >> $log
        echo "BKJS_HOME=$BKJS_HOME" >> $log
        echo 'export PATH=$BKJS_HOME/bin:$BKJS_HOME/node_modules/.bin:$HOME/bin:$PATH' >> $log
        echo 'export AWS_PAGER=""' >> $log
        echo 'alias slog="tail -100 /var/log/messages"' >> $log
        echo "alias clog=\"sudo tail -100 /var/log/cron\"" >> $log
        echo "alias mlog=\"tail -100 $BKJS_HOME/log/message.log\"" >> $log
        echo "alias elog=\"tail -100 $BKJS_HOME/log/error.log\"" >> $log
        echo "alias alog=\"tail -100 $BKJS_HOME/log/access.log\"" >> $log
        echo "alias dlog=\"tail -100 $BKJS_HOME/log/docker.log\"" >> $log
        echo 'alias h="history"' >> $log
        echo 'alias ll="ls -la"' >> $log
        echo 'alias ps="ps augx"' >> $log
        echo 'alias mc="mc -b"' >> $log
        echo 'alias df="df -h"' >> $log
        echo 'alias bkls="bkjs ec2-ls"' >> $log
        echo 'alias d=docker' >> $log
        echo 'alias g=git' >> $log
        echo 'alias di="docker images"' >> $log
        echo 'alias dexec="docker exec -ti"' >> $log
        echo 'bcp() { socat readline,history=$HOME/.socat tcp4:localhost:$1; }' >> $log
        echo 'bkssh() { bkjs ec2-ssh -tag "$1" -index "$2" -cmd "$3" -skip-tag dev; }' >> $log
        echo '[ -f ~/.aliases ] && . ~/.aliases' >> $log
    fi

    if [ "$(grep -s bashrc $UHOME/.bash_profile)" = "" ]; then
        echo "Configuring .bash_profile .bashrc..."
        echo '[ -f ~/.bashrc ] && . ~/.bashrc' >> $UHOME/.bash_profile
    fi

    if [ "$(grep -s '#Bkjs' $UHOME/.bash_profile)" = "" ]; then
        log=$UHOME/.bash_profile
        echo "Configuring $log..."
        echo '#Bkjs' >> $log
        echo 'export HISTSIZE=500000' >> $log
        echo 'export HISTFILESIZE=50000000' >> $log
        echo 'export PS1="\h \w#"' >> $log
        echo '[ -f ~/etc/profile ] && . ~/etc/profile' >> $log
        echo '[ "$TMUX_PANE" != "" ] && PS1=$(echo $PS1|sed "s/#/${TMUX_PANE}#/")' >> $log
    fi
    chown -R $BKJS_USER $UHOME $UHOME/.ssh $UHOME/.bash*
    exit
    ;;

  setup-ssh)
    # Allow only pubkey auth
    [ "$(grep -s '#Bkjs' /etc/ssh/sshd_config)" != "" ] && exit
    echo "Configuring ssh..."
    log=/tmp/sshd_config
    egrep -v '^(#Bkjs|PasswordAuth|GSSAPIAuth|MaxAuth|MaxSess|ClientAlive|PermitRootLogin)' /etc/ssh/sshd_config > $log
    echo "" >> $log
    echo "#Bkjs config" >> $log
    echo "PermitRootLogin no" >> $log
    echo "PasswordAuthentication no" >> $log
    echo "MaxAuthTries 10" >> $log
    echo "MaxSessions 10" >> $log
    echo "ClientAliveInterval 15" >> $log
    echo "ClientAliveCountMax 5" >> $log
    mv $log /etc/ssh
    chmod 600 /etc/ssh/sshd_config
    exit
    ;;

  setup-logrotate)
    # Setup logrotate for backend log files
    days=$(get_arg -logrotate-days 30)

    [ -f /etc/logrotate.d/syslog ] && rm -f /etc/logrotate.d/syslog
    if [ "$(grep -s '#Bkjs' /etc/logrotate.d/rsyslog)" = "" ]; then
        log=/etc/logrotate.d/rsyslog
        echo "Configuring $log..."
        echo "#Bkjs" > $log
        echo "/var/log/cron /var/log/messages $(get_arg -sysfiles) {" >> $log
        echo " missingok" >> $log
        echo " nocompress" >> $log
        echo " daily" >> $log
        echo " rotate $days" >> $log
        echo " sharedscripts" >> $log
        echo " postrotate" >> $log
        echo "  /usr/bin/killall -q -HUP rsyslogd" >> $log
        echo " endscript" >> $log
        echo "}" >> $log
    fi

    [ -n "$(get_flag -force)" ] && rm -f /etc/logrotate.d/bkjs
    if [ "$(grep -s "#Bkjs $BKJS_HOME" /etc/logrotate.d/bkjs)" = "" ]; then
        log=/etc/logrotate.d/bkjs
        echo "Configuring $log..."
        echo "#Bkjs $BKJS_HOME" > $log
        echo "$BKJS_HOME/log/message.log $BKJS_HOME/log/access.log $(get_arg -logfiles) {" >> $log
        echo " missingok" >> $log
        echo " nocompress" >> $log
        echo " daily" >> $log
        echo " rotate $days" >> $log
        echo " sharedscripts" >> $log
        echo " postrotate" >> $log
        echo "  /usr/bin/killall -q -HUP rsyslogd" >> $log
        echo " endscript" >> $log
        echo "}" >> $log
    fi
    exit
    ;;

  setup-syslog)
    # Setup syslog config for backend logging

    if [ -z "$(grep -s '#Bkjs' /etc/syslog.conf)" ]; then
        log=/etc/syslog.conf
        echo "Configuring $log..."
        echo "#Bkjs" > $log
        echo 'kern.*,*.emerg /dev/console' >> $log
        echo 'cron.* /var/log/cron' >> $log
        echo 'local7.* /var/log/boot.log' >> $log
        echo '*.info;cron.none,local0.none,local5.none /var/log/messages' >> $log
        echo "local0.* $BKJS_HOME/log/message.log" >> $log
        echo "local5.* $BKJS_HOME/log/access.log" >> $log
    fi
    exit
    ;;

  setup-rsyslog)
    # Setup rsyslog config for backend logging

    log=/etc/rsyslog.conf
    if [ -z "$(grep -s '#Bkjs' $log)" ]; then
        echo "Configuring rsyslog..."
        echo "#Bkjs" > $log
        echo '$ModLoad imklog' >> $log
        echo '$ModLoad imuxsock' >> $log
        echo '$ModLoad imudp' >> $log
        echo '$UDPServerAddress 127.0.0.1' >> $log
        echo '$UDPServerRun 514' >> $log
        echo '$MaxMessageSize 64k' >> $log
        echo '$SystemLogRateLimitInterval 0' >> $log
        echo '$SystemLogRateLimitBurst 0' >> $log
        echo '$ActionFileDefaultTemplate RSYSLOG_FileFormat' >> $log
        echo 'kern.*,*.emerg /dev/console' >> $log
        echo '$IncludeConfig /etc/rsyslog.d/*.conf' >> $log
        echo 'cron.* /var/log/cron' >> $log
        echo 'local7.* /var/log/boot.log' >> $log
        echo "\$FileOwner $BKJS_USER" >> $log
        echo '*.info;cron.none,local0.none,local5.none /var/log/messages' >> $log
        rm -rf /var/log/maillog* /var/log/secure* /var/log/spooler*
        touch /var/log/messages
        chown -R $BKJS_USER /var/log/messages

        if [ "$OS_TYPE" = "alpine" ]; then
            rc-update -a del syslog
            rc-update add rsyslog boot
        fi
    fi

    log=/etc/rsyslog.d/bkjs.conf
    if [ -z "$(grep -s "#Bkjs $BKJS_HOME" $log)" ]; then
        echo "Configuring $log ..."
        mkdir -p /etc/rsyslog.d
        echo "#Bkjs $BKJS_HOME" > $log
        echo "\$FileOwner $BKJS_USER" >> $log
        echo "local0.* $BKJS_HOME/log/message.log" >> $log
        echo "local5.* $BKJS_HOME/log/access.log" >> $log
    fi
    exit
    ;;

  setup-rsyslog-docker)
    conf=/etc/rsyslog.d/bkjs-docker.conf
    if [ -z "$(grep -s "#Bkjs $BKJS_HOME" $conf)" ]; then
        facility=$(get_arg -facility local1)

        echo Configuring $conf ...
        echo "#Bkjs $BKJS_HOME" > $conf
        echo "\$FileOwner $BKJS_USER" >> $conf
        echo "$facility.* $BKJS_HOME/log/docker.log" >> $conf

        $SED "s/local0.none/local0.none,$facility.none/" /etc/rsyslog.conf

        $BKJS_BIN setup-logrotate -force -logfiles $BKJS_HOME/log/docker.log

        mkdir -p /etc/docker
        json=/etc/docker/daemon.json

        tag=$(get_arg -tag Name)

        echo '{ "features": { "buildkit": true },' > $json
        echo '  "log-driver": "syslog", ' >> $json
        echo '  "log-opts": { ' >> $json
        echo "     \"tag\": \"{{.$tag}}\", " >> $json
        echo "     \"syslog-facility\": \"$facility\"," >> $json
        echo '     "cache-disabled": "true",' >> $json
        echo '     "mode": "non-blocking"' >> $json
        echo '  }' >> $json
        echo '}' >> $json
    fi
    exit
    ;;

  setup-limits)
    # File handles and coredumps for debugging
    if [ -d /etc/security/limits.d ]; then
        conf=/etc/security/limits.d/90-bkjs.conf
        if [ ! -s $conf ]; then
            echo "Configuring limits..."
            echo '* soft core unlimited' > $conf
            echo '* hard core unlimited' >> $conf
            echo '* soft nofile 512000' >> $conf
            echo '* hard nofile 512000' >> $conf
            echo 'root soft nofile 512000' >> $conf
            echo 'root hard nofile 512000' >> $conf
            echo '* soft memlock unlimited' >> $conf
            echo '* hard memlock unlimited' >> $conf
            echo 'root soft memlock unlimited' >> $conf
            echo 'root hard memlock unlimited' >> $conf
            echo '* soft as unlimited' >> $conf
            echo '* hard as unlimited' >> $conf
            echo 'root soft as unlimited' >> $conf
            echo 'root hard as unlimited' >> $conf
        fi
    fi
    if [ -f /etc/rc.conf ]; then
        $SED 's/^#?rc_ulimit.*/rc_ulimit="-n 512000 -c unlimited -l unlimited"/' /etc/rc.conf
    fi
    exit
    ;;

  setup-sysctl)
    # System tuning
    conf=/etc/sysctl.d/90-bkjs.conf
    [ -s $conf ] && exit
    echo "Configuring sysctl..."
    echo 'fs.file-max=512000' > $conf
    echo 'kernel.core_uses_pid=0' >> $conf
    echo 'vm.max_map_count=262144' >> $conf
    echo 'vm.min_free_kbytes=65536' >> $conf
    echo 'net.core.somaxconn=65536' >> $conf
    echo 'net.core.netdev_max_backlog=65536' >> $conf
    echo 'net.core.rmem_max=26214400' >> $conf
    echo 'net.core.wmem_max=26214400' >> $conf
    echo 'net.core.optmem_max=26214400' >> $conf
    echo 'net.ipv4.tcp_rfc1337=1' >> $conf
    echo 'net.ipv4.ip_local_port_range=2000 65000' >> $conf
    echo 'net.ipv4.tcp_max_tw_buckets=1440000' >> $conf
    echo 'net.ipv4.tcp_window_scaling=1' >> $conf
    echo 'net.ipv4.tcp_tw_reuse=1' >> $conf
    echo 'net.ipv4.tcp_fin_timeout=15' >> $conf
    echo 'net.ipv4.tcp_keepalive_intvl=15' >> $conf
    echo 'net.ipv4.tcp_keepalive_time=30' >> $conf
    echo 'net.ipv4.tcp_keepalive_probes=5' >> $conf
    echo 'net.ipv4.tcp_slow_start_after_idle=0' >> $conf
    echo 'net.ipv4.tcp_max_orphans=262144' >> $conf
    echo 'net.ipv4.tcp_max_syn_backlog=3240000' >> $conf
    echo 'net.ipv4.tcp_no_metrics_save=1' >> $conf
    echo 'net.ipv4.tcp_syn_retries=2' >> $conf
    echo 'net.ipv4.tcp_synack_retries=2' >> $conf
    echo 'net.ipv4.tcp_rmem=8192 87380 16777216' >> $conf
    echo 'net.ipv4.tcp_wmem=8192 65536 16777216' >> $conf
    echo 'net.ipv4.tcp_challenge_ack_limit = 999999999' >> $conf
    if [ "$(get_flag -noipv6)" != "" ]; then
        echo 'net.ipv6.conf.all.disable_ipv6 = 1' >> $conf
        echo 'net.ipv6.conf.default.disable_ipv6 = 1' >> $conf
        echo 'net.ipv6.conf.lo.disable_ipv6 = 1' >> $conf
    fi
    sysctl -p $conf
    exit
    ;;

  setup-service)
    # Install service for a script or bkjs service

    if [ -z "$(get_flag -stop)" ]; then
        bin=$(get_arg -bin $BKJS_BIN)

        msg "Starting service bkjs with $bin"

        case $OS_TYPE in
          alpine)
            conf=/etc/init.d/bkjs
            echo -e "#!/sbin/openrc-run\nname=\"bkjs\"\ncommand=$bin\ncommand_args=start\ndepend() {\nafter net\nbefore sshd\n}" > $conf
            chmod 755 $conf
            rc-update add bkjs
            ;;

          *)
            [ ! -d /etc/init.d ] && echo "SysV init scripts are not supported" && exit
            ln -sfn $bin /etc/init.d/bkjs
            ln -sfn /etc/init.d/bkjs /etc/rc5.d/S31bkjs
            ;;
        esac
    else
        msg "Stopping service bkjs"
        case $OS_TYPE in
          alpine)
            rc-update -a del bkjs
            ;;

          *)
            rm -f /etc/init.d/bkjs /etc/rc5.d/S31bkjs
            ;;
        esac
        $BKJS_BIN stop
    fi
    exit
    ;;

  setup-packages)
    # Install required development and runtime packages

    # Linux distro specific actions
    case "$OS_TYPE" in
    alpine)
        ver=$(cat /etc/alpine-release|cut -d. -f1,2)
        $SED "s/^# *(.+v$ver\/community)\$/\1/" /etc/apk/repositories
        apk update
        apk add bash curl curl-doc wget nano mc procps docker logrotate
        apk add make git gcc g++ cmake autoconf automake libtool man-pages go
        apk add shadow doas doas-sudo-shim rsync socat
        apk add nodejs npm python3 openrc openrc-doc openssh monit rsyslog rsyslog-openrc redis
        apk add tiny-cloud tiny-cloud-aws tiny-cloud-openrc nvme-cli aws-cli
        ;;
    esac
    exit
    ;;

  setup-mfa)
    [ "$(whoami)" != "root" ] && echo "Run as root please" && exit 1
    case "$OS_TYPE" in
      alpine)
        apk add google-authenticator openssh-server-pam

        echo -e "auth required pam_env.so" > /etc/pam.d/sshd
        echo -e "auth required pam_nologin.so successok" >> /etc/pam.d/sshd
        echo -e "auth required pam_google_authenticator.so echo_verification_code grace_period=900 nullok" >> /etc/pam.d/sshd
        echo -e "account include base-account" >> /etc/pam.d/sshd
        echo -e "password include base-password" >> /etc/pam.d/sshd
        ln /etc/pam.d/sshd /etc/pam.d/sshd.pam
        $BKJS_BIN setup-limits
        ;;

      amazon)
        yum install google-authenticator –y
        if [ "$(egrep -s 'pam_google_authenticator' /etc/pam.d/sshd)" = "" ]; then
            $SED 's/^auth[ \t]+substack[ \t]+password-auth/auth required pam_google_authenticator.so\n#auth substack password-auth/' /etc/pam.d/sshd
        fi
        if [ "$(egrep -s 'pam_google_authenticator' /etc/pam.d/system-auth)" = "" ]; then
            $SED 's/^auth[ \t]+sufficient[ \t]+pam_unix.so nullok try_first_pass/auth requisite pam_unix.so nullok try_first_pass\nauth sufficient pam_google_authenticator.so/' /etc/pam.d/system-auth
        fi
        ;;
    esac

    echo >> /etc/ssh/sshd_config
    if [ "$(egrep -s '^UsePAM yes' /etc/ssh/sshd_config)" = "" ]; then
        $SED 's/^UsePAM/#UsePAM/' /etc/ssh/sshd_config
        echo 'UsePAM yes' >> /etc/ssh/sshd_config
    fi
    if [ "$(egrep -s '^ChallengeResponseAuthentication yes' /etc/ssh/sshd_config)" = "" ]; then
        $SED 's/^ChallengeResponseAuthentication/#ChallengeResponseAuthentication/' /etc/ssh/sshd_config
        echo 'ChallengeResponseAuthentication yes' >> /etc/ssh/sshd_config
    fi
    if [ "$(egrep -s '^AuthenticationMethods publickey,keyboard-interactive' /etc/ssh/sshd_config)" = "" ]; then
        $SED 's/^AuthenticationMethods/#AuthenticationMethods/' /etc/ssh/sshd_config
        echo 'AuthenticationMethods publickey,keyboard-interactive' >> /etc/ssh/sshd_config
    fi
    su $(get_arg -user ec2-user) -c "google-authenticator -d -t -f -r 2 -R 30"
    exit
    ;;

esac

