#!/bin/bash
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#

case "$BKJS_CMD" in

  restart)
    [ ! -f /etc/monit.d/$BKJS.conf ] && $0 start
    ;;

  init-server)
    [ "$(whoami)" != "root" ] && echo "Run as root please" && exit 1
    args=$(get_all_args)
    find_user
    find_nodebin
    echo "Setuping server in $BKJS_HOME for $BKJS_USER/$(get_arg -user), prefix: $BKJS_PREFIX, binaries: $NODE_BIN, $BKJS_BIN... ($args)"

    ($0 install-packages $args)
    ($0 init-hostname $args)
    ($0 init-ssh $args)
    ($0 init-user $args)
    ($0 init-system $args)
    ($0 init-limits $args)
    ($0 init-sysctl $args)
    ($0 init-monit-system $args)
    ($0 init-logrotate $args)
    ($0 init-rsyslog $args)
    ($0 init-home $args)
    ($0 init-service $args)
    ($0 init-profile $args)
    exit
    ;;

   init-profile)
    # Create global profile
    find_user
    sysconf=/etc/sysconfig
    [ ! -d $sysconf -a -d /etc/default ] && sysconf=/etc/default
    echo "BKJS_HOME=$BKJS_HOME" > $sysconf/$BKJS
    domain=$(get_arg -domain)
    [ "$domain" != "" ] && echo "BKJS_DOMAIN=$domain" >> $sysconf/$BKJS
    [ "$BKJS_USER" != "root" ] && echo "BKJS_USER=$BKJS_USER" >> $sysconf/$BKJS
    chown -R $BKJS_USER $BKJS_HOME
    exit
    ;;

  init-hostname)
    host=$(get_arg -host $BKJS_HOST)
    [ "$host" = "" ] && host=$(uname -n|awk -F. '{print $1}')
    domain=$(get_arg -domain $BKJS_DOMAIN)
    # Set hostname with name and domain
    if [ "$domain" = "" ]; then
       host=$(get_arg -host)
       [ "$host" = "" ] && exit
       domain=$(uname -n|cut -d. -f2-)
    fi
    host=$host.$domain
    [ "$(uname -n)" = "$host" ] && exit
    echo "Configuring hostname $host ..."
    hostname $host
    echo $host > /etc/hostname
    if [ -f /etc/sysconfig/network ]; then
       echo "HOSTNAME=$host" > /tmp/network
       grep -v HOSTNAME /etc/sysconfig/network >> /tmp/network
       mv /tmp/network /etc/sysconfig/network
    fi
    service rsyslog restart
    monit reload
    exit
    ;;

  init-user)
    # Add local user
    find_user
    LHOME=/home/$BKJS_USER
    if [ "$(grep -s $BKJS_USER /etc/passwd)" = "" ]; then
        echo "Adding user $BKJS_USER..."
        useradd -m -g wheel -s /bin/bash $BKJS_USER
        mkdir -p -m 700 $LHOME/.ssh && chown $BKJS_USER $LHOME/.ssh
    fi

    if [ -f /etc/conf.d/tiny-cloud ]; then
        $SED "s/^#?CLOUD_USER.+/CLOUD_USER=$BKJS_USER/" /etc/conf.d/tiny-cloud
    fi

    # Allow path in sudo and skip tty for our user so we can run commands via ssh
    if [ -d /etc/sudoers.d -a ! -f /etc/sudoers.d/$BKJS ]; then
        echo "Defaults secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:$BKJS_PREFIX/bin:$LHOME/bin:$LHOME/node_modules/.bin" >> /etc/sudoers.d/$BKJS
        echo "Defaults:$BKJS_USER !requiretty" >> /etc/sudoers.d/$BKJS
        echo "$BKJS_USER ALL = NOPASSWD: ALL" > /etc/sudoers.d/$BKJS
    fi

    # Aliases and environment
    if [ "$(grep -s '#Bkjs' $LHOME/.bashrc)" = "" ]; then
       echo "Configuring .bashrc..."
       echo '#Bkjs' >> $LHOME/.bashrc
       echo "umask 022" >> $LHOME/.bashrc
       echo "BKJS_HOME=$BKJS_HOME" >> $LHOME/.bashrc
       echo "export PATH=\$PATH:$LHOME/bin:$LHOME/node_modules/.bin" >> $LHOME/.bashrc
       echo 'alias slog="tail -100 /var/log/messages"' >> $LHOME/.bashrc
       echo "alias clog=\"sudo tail -100 /var/log/cron\"" >> $LHOME/.bashrc
       echo "alias mlog=\"tail -100 $BKJS_HOME/log/message.log\"" >> $LHOME/.bashrc
       echo "alias elog=\"tail -100 $BKJS_HOME/log/error.log\"" >> $LHOME/.bashrc
       echo "alias alog=\"tail -100 $BKJS_HOME/log/access.log\"" >> $LHOME/.bashrc
       echo 'alias h="history"' >> $LHOME/.bashrc
       echo 'alias ll="ls -la"' >> $LHOME/.bashrc
       echo 'alias ps="ps augx"' >> $LHOME/.bashrc
       echo 'alias mc="mc -b"' >> $LHOME/.bashrc
       echo 'alias df="df -h"' >> $LHOME/.bashrc
       echo 'alias bkls="bkjs ec2-ls"' >> $LHOME/.bashrc
       echo 'bcp() { socat readline,history=$HOME/.socat tcp4:localhost:$1; }' >> $LHOME/.bashrc
       echo 'bkssh() { bkjs ec2-ssh -tag "$1" -index "$2" -cmd "$3" -skip-tag dev,staging; }' >> $LHOME/.bashrc
       echo 'bkstop() { bkjs ec2-ssh -tag ${1-api} -index "$2" -cmd "bkjs stop-${3-api}" -skip-tag dev,staging; }' >> $LHOME/.bashrc
       echo 'bksync() { (cd $HOME/node_modules/$1 && bkjs sync -host "$(bkjs ec2-host -tag ${2-api} -skip-tag dev,staging)"); }' >> $LHOME/.bashrc
       echo 'bkw() { bkssh ${1-api} "" "w"; }' >> $LHOME/.bashrc
       echo 'bkami() { bkjs create-ami && bkjs create-launch-template-version; }' >> $LHOME/.bashrc
       echo "PROMPT_COMMAND='printf \"\\033]0;\$(cat \$HOME/var/bkjs.tag)\\007\"'" >> $LHOME/.bashrc
    fi

    if [ "$(grep -s bashrc $LHOME/.bash_profile)" = "" ]; then
        echo "Configuring .bash_profile .bashrc..."
        echo '[ -f ~/.bashrc ] && . ~/.bashrc' >> $LHOME/.bash_profile
    fi

    if [ "$(grep -s '#Bkjs' $LHOME/.bash_profile)" = "" ]; then
       echo "Configuring .bash_profile..."
       echo '#Bkjs' >> $LHOME/.bash_profile
       echo '[ ! -s ~/var/bkjs.tag ] && bkjs ec2-tag > ~/var/bkjs.tag' >> $LHOME/.bash_profile
       echo '[ -s ~/var/bkjs.tag ] && export PS1=$(cat ~/var/bkjs.tag)#' >> $LHOME/.bash_profile
    fi
    echo "package-lock=false" > $LHOME/.npmrc
    exit
    ;;

  init-home)
    # Create required directories
    find_user
    mkdir -p $BKJS_HOME/node_modules $BKJS_HOME/bin $BKJS_HOME/log $BKJS_HOME/etc $BKJS_HOME/var
    if [ "$BKJS_USER" != "root" -a ! -f $BKJS_HOME/etc/config ]; then
       echo "Creating default $BKJS config ..."
       $ECHO "uid=$BKJS_USER\nforce-uid=1" > $BKJS_HOME/etc/config
    fi
    chown -R $BKJS_USER $BKJS_HOME
    exit
    ;;

  init-ssh)
    # Allow only pubkey auth
    [ "$(grep -s '#Bkjs' /etc/ssh/sshd_config)" != "" ] && exit
    echo "Configuring ssh..."
    egrep -v '^(#Bkjs|PasswordAuth|GSSAPIAuth|MaxAuth|MaxSess|ClientAlive|PermitRootLogin)' /etc/ssh/sshd_config > /tmp/sshd_config
    echo "" >> /tmp/sshd_config
    echo "#Bkjs config" >> /tmp/sshd_config
    echo "PermitRootLogin no" >> /tmp/sshd_config
    echo "PasswordAuthentication no" >> /tmp/sshd_config
    echo "MaxAuthTries 10" >> /tmp/sshd_config
    echo "MaxSessions 10" >> /tmp/sshd_config
    echo "ClientAliveInterval 15" >> /tmp/sshd_config
    echo "ClientAliveCountMax 5" >> /tmp/sshd_config
    mv /tmp/sshd_config /etc/ssh
    chmod 600 /etc/ssh/sshd_config
    service sshd restart
    exit
    ;;

  init-logrotate)
    # Setup logrotate for backend log files
    if [ "$(grep -s '#Bkjs' /etc/logrotate.d/syslog)" = "" ]; then
       echo "Configuring logrotate..."
       echo "#Bkjs" > /etc/logrotate.d/syslog
       echo "/var/log/cron /var/log/messages {" >> /etc/logrotate.d/syslog
       echo " missingok" >> /etc/logrotate.d/syslog
       echo " daily" >> /etc/logrotate.d/syslog
       echo " rotate 90" >> /etc/logrotate.d/$BKJS
       echo " sharedscripts" >> /etc/logrotate.d/syslog
       echo " postrotate" >> /etc/logrotate.d/syslog
       echo "  /usr/bin/killall -q -HUP rsyslogd" >> /etc/logrotate.d/syslog
       echo " endscript" >> /etc/logrotate.d/syslog
       echo "}" >> /etc/logrotate.d/syslog
    fi
    if [ "$(grep -s "#Bkjs $BKJS_HOME" /etc/logrotate.d/$BKJS)" = "" ]; then
       echo "Configuring logrotate.d/$BKJS..."
       echo "#Bkjs $BKJS_HOME" > /etc/logrotate.d/$BKJS
       echo "$BKJS_HOME/log/message.log $BKJS_HOME/log/access.log {" >> /etc/logrotate.d/$BKJS
       echo " missingok" >> /etc/logrotate.d/$BKJS
       echo " daily" >> /etc/logrotate.d/$BKJS
       echo " rotate 90" >> /etc/logrotate.d/$BKJS
       echo " sharedscripts" >> /etc/logrotate.d/$BKJS
       echo " postrotate" >> /etc/logrotate.d/$BKJS
       echo "  /usr/bin/killall -q -HUP rsyslogd" >> /etc/logrotate.d/$BKJS
       echo " endscript" >> /etc/logrotate.d/$BKJS
       echo "}" >> /etc/logrotate.d/$BKJS
    fi
    exit
    ;;

  init-syslog)
    # Setup syslog config for backend logging
    find_user

    if [ "$(grep -s '#Bkjs' /etc/syslog.conf)" = "" ]; then
       echo "Configuring syslog..."
       echo "#Bkjs" > /etc/syslog.conf
       echo 'kern.*,*.emerg /dev/console' >> /etc/syslog.conf
       echo 'cron.* /var/log/cron' >> /etc/syslog.conf
       echo 'local7.* /var/log/boot.log' >> /etc/syslog.conf
       echo '*.info;cron.none,local0.none,local5.none /var/log/messages' >> /etc/syslog.conf
       echo "local0.* $BKJS_HOME/log/message.log" >> /etc/syslog.conf
       echo "local5.* $BKJS_HOME/log/access.log" >> /etc/syslog.conf
       mkdir -p $BKJS_HOME/log
       chown -R $BKJS_USER $BKJS_HOME/log
       service syslog restart
    fi
    exit
    ;;

  init-rsyslog)
    # Setup rsyslog config for backend logging
    find_user

    if [ "$(grep -s '#Bkjs' /etc/rsyslog.conf)" = "" ]; then
       echo "Configuring rsyslog..."
       echo "#Bkjs" > /etc/rsyslog.conf
       if [ -d /etc/systemd ]; then
          echo '$ModLoad imjournal' >> /etc/rsyslog.conf
       else
          echo '$ModLoad imklog' >> /etc/rsyslog.conf
       fi
       echo '$ModLoad imuxsock' >> /etc/rsyslog.conf
       echo '$ModLoad imudp' >> /etc/rsyslog.conf
       echo '$UDPServerAddress 127.0.0.1' >> /etc/rsyslog.conf
       echo '$UDPServerRun 514' >> /etc/rsyslog.conf
       echo '$MaxMessageSize 64k' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitInterval 0' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitBurst 0' >> /etc/rsyslog.conf
       echo '$ActionFileDefaultTemplate RSYSLOG_FileFormat' >> /etc/rsyslog.conf
       if [ -d /etc/systemd ]; then
          echo '$IMJournalStateFile imjournal.state' >> /etc/rsyslog.conf
          echo '$imjournalRatelimitInterval 0' >> /etc/rsyslog.conf
          echo '$imjournalRatelimitBurst 0' >> /etc/rsyslog.conf
          echo '$OmitLocalLogging on' >> /etc/rsyslog.conf
          echo '*.emerg :omusrmsg:*' >> /etc/rsyslog.conf
       else
          echo 'kern.*,*.emerg /dev/console' >> /etc/rsyslog.conf
       fi
       echo '$IncludeConfig /etc/rsyslog.d/*.conf' >> /etc/rsyslog.conf
       echo 'cron.* /var/log/cron' >> /etc/rsyslog.conf
       echo 'local7.* /var/log/boot.log' >> /etc/rsyslog.conf
       echo "\$FileOwner $BKJS_USER" >> /etc/rsyslog.conf
       echo '*.info;cron.none,local0.none,local5.none /var/log/messages' >> /etc/rsyslog.conf
       rm -rf /var/log/maillog* /var/log/secure* /var/log/spooler*
       touch /var/log/messages
       chown -R $BKJS_USER /var/log/messages
       service rsyslog restart
    fi
    if [ "$(grep -s "#Bkjs $BKJS_HOME" /etc/rsyslog.d/$BKJS.conf)" = "" ]; then
       echo "Configuring rsyslog.d/$BKJS ..."
       mkdir -p /etc/rsyslog.d
       echo "#Bkjs $BKJS_HOME" > /etc/rsyslog.d/$BKJS.conf
       echo "\$FileOwner $BKJS_USER" >> /etc/rsyslog.d/$BKJS.conf
       bkjsfmt=""
       if [ -d /etc/systemd ]; then
          echo '$template bkjsfmt,"%HOSTNAME% %msg%\n"' >> /etc/rsyslog.d/$BKJS.conf
          bkjsfmt=";bkjsfmt"
       fi
       echo "local0.* $BKJS_HOME/log/message.log$bkjsfmt" >> /etc/rsyslog.d/$BKJS.conf
       echo "local5.* $BKJS_HOME/log/access.log$bkjsfmt" >> /etc/rsyslog.d/$BKJS.conf
       mkdir -p $BKJS_HOME/log
       chown -R $BKJS_USER $BKJS_HOME/log
       service rsyslog restart
    fi
    exit
    ;;

  init-system)
    # Disable SELinux
    if [ -f /etc/selinux/config ]; then
        sed -i 's/SELINUX=(enforcing|permissive)/SELINUX=disabled/' /etc/selinux/config
    fi

    case "$OS_TYPE" in
      amazon)
        chkconfig monit on
        sed -E -i 's/^After.+$/After=network.target cloud-init.target/' /etc/systemd/system/multi-user.target.wants/monit.service
        ;;

      alpine)
        rc-update add monit
        ln -s /usr/bin/doas /usr/bin/sudo
        echo "permit nopass :wheel as root" >> /etc/doas.d/doas.conf
        ;;
    esac
    # Make sure monit is running all the time
    mkdir -p /etc/monit.d
    echo "set logfile syslog" > /etc/monit.d/logging
    service monit restart

    # Allow sudo use local binaries
    [ -f /etc/sudoers ] && sed -i 's/requiretty/!requiretty/' /etc/sudoers
    exit
    ;;

  init-limits)
    # File handles and coredumps for debugging
    if [ -d /etc/security/limits.d ]; then
        conf=/etc/security/limits.d/90-$BKJS.conf
        if [ ! -s $conf ]; then
            echo "Configuring limits..."
            echo '* soft core unlimited' > $conf
            echo '* hard core unlimited' >> $conf
            echo '* soft nofile 512000' >> $conf
            echo '* hard nofile 512000' >> $conf
            echo 'root soft nofile 512000' >> $conf
            echo 'root hard nofile 512000' >> $conf
            echo '* soft memlock unlimited' >> $conf
            echo '* hard memlock unlimited' >> $conf
            echo 'root soft memlock unlimited' >> $conf
            echo 'root hard memlock unlimited' >> $conf
            echo '* soft as unlimited' >> $conf
            echo '* hard as unlimited' >> $conf
            echo 'root soft as unlimited' >> $conf
            echo 'root hard as unlimited' >> $conf
        fi
    fi
    if [ -f /etc/rc.conf ]; then
        sed -i 's|^#?rc_ulimit.*|rc_ulimit="-n 512000 -c unlimited -l unlimited"|' /etc/rc.conf
    fi
    if [ -f /etc/init.d/monit ]; then
        sed -i 's|daemon $prog|ulimit -n 512000\n\tdaemon $prog|' /etc/init.d/monit
    fi
    if [ -f /etc/systemd/system.conf ]; then
        sed -i -E 's/^#?DefaultLimitNOFILE=.*$/DefaultLimitNOFILE=512000/' /etc/systemd/system.conf
    fi
    exit
    ;;

  init-sysctl)
    # System tuning
    conf=/etc/sysctl.d/90-$BKJS.conf
    [ -s $conf ] && exit
    echo "Configuring sysctl..."
    echo 'fs.file-max=512000' > $conf
    echo 'kernel.core_uses_pid=0' >> $conf
    echo 'vm.max_map_count=262144' >> $conf
    echo 'vm.min_free_kbytes=65536' >> $conf
    echo 'net.core.somaxconn=65536' >> $conf
    echo 'net.core.netdev_max_backlog=65536' >> $conf
    echo 'net.core.rmem_max=26214400' >> $conf
    echo 'net.core.wmem_max=26214400' >> $conf
    echo 'net.core.optmem_max=26214400' >> $conf
    echo 'net.ipv4.tcp_rfc1337=1' >> $conf
    echo 'net.ipv4.ip_local_port_range=2000 65000' >> $conf
    echo 'net.ipv4.tcp_max_tw_buckets=1440000' >> $conf
    echo 'net.ipv4.tcp_window_scaling=1' >> $conf
    echo 'net.ipv4.tcp_tw_reuse=1' >> $conf
    echo 'net.ipv4.tcp_fin_timeout=15' >> $conf
    echo 'net.ipv4.tcp_keepalive_intvl=15' >> $conf
    echo 'net.ipv4.tcp_keepalive_time=30' >> $conf
    echo 'net.ipv4.tcp_keepalive_probes=5' >> $conf
    echo 'net.ipv4.tcp_slow_start_after_idle=0' >> $conf
    echo 'net.ipv4.tcp_max_orphans=262144' >> $conf
    echo 'net.ipv4.tcp_max_syn_backlog=3240000' >> $conf
    echo 'net.ipv4.tcp_no_metrics_save=1' >> $conf
    echo 'net.ipv4.tcp_syn_retries=2' >> $conf
    echo 'net.ipv4.tcp_synack_retries=2' >> $conf
    echo 'net.ipv4.tcp_rmem=8192 87380 16777216' >> $conf
    echo 'net.ipv4.tcp_wmem=8192 65536 16777216' >> $conf
    echo 'net.ipv4.tcp_challenge_ack_limit = 999999999' >> $conf
    if [ "$(get_flag -noipv6)" != "" ]; then
        echo 'net.ipv6.conf.all.disable_ipv6 = 1' >> $conf
        echo 'net.ipv6.conf.default.disable_ipv6 = 1' >> $conf
        echo 'net.ipv6.conf.lo.disable_ipv6 = 1' >> $conf
    fi
    sysctl -p $conf
    exit
    ;;

  init-postfix)
    # Setup postfix with origin domain name
    [ "$(grep -s '#Bkjs' /etc/postfix/main.cf)" != "" ] && exit
    yum -y -q remove sendmail
    yum -y -q install postfix
    echo "Configuring postfix..."
    echo '#Bkjs' > /tmp/main.cf
    echo 'myorigin = $mydomain' >> /tmp/main.cf
    egrep -v '^(#Bkjs|myorigin)' /etc/postfix/main.cf >> /tmp/main.cf
    mv /tmp/main.cf /etc/postfix
    chkconfig postfix on
    postfix start
    exit
    ;;

  init-dns)
    # DNS cache
    [ "$(grep -s '#Bkjs' /etc/dnsmasq.conf)" != "" ] && exit
    yum -y -q install dnsmasq
    echo "#Bkjs" > /etc/dnsmasq.conf
    echo "domain-needed" >> /etc/dnsmasq.conf
    echo "bogus-priv" >> /etc/dnsmasq.conf
    echo "no-resolv" >> /etc/dnsmasq.conf
    echo "no-poll" >> /etc/dnsmasq.conf
    grep nameserver /etc/resolv.conf |grep -v 127|sed 's/nameserver /server=/' >> /etc/dnsmasq.conf
    echo "server=8.8.8.8" >> /etc/dnsmasq.conf
    echo "server=8.8.4.4" >> /etc/dnsmasq.conf
    echo "listen-address=127.0.0.1" >> /etc/dnsmasq.conf
    echo "no-dhcp-interface=" >> /etc/dnsmasq.conf
    echo "nameserver 127.0.0.1" > /etc/resolv.conf
    echo "search $BKJS_DNS" >> /etc/resolv.conf
    chkconfig dnsmasq on
    service dnsmasq restart
    exit
    ;;

  init-adhoc)
    # Duplicate messages to the console for easier access
    echo '*.info /dev/console' > /etc/rsyslog.d/console.conf
    truncate -c -s 0 /var/log/messages $BKJS_HOME/log/message.log $BKJS_HOME/log/error.log
    service rsyslog restart
    # Support for shutdown as normal user for instances
    chmod u+s /sbin/reboot
    # Make sure instances are not running indefinitely
    cron=$(get_arg -cron "*/30 * * * *")
    echo 'MAILTO=""' > /etc/cron.d/$BKJS-adhoc
    echo "$cron root $BKJS_BIN check-adhoc" >> /etc/cron.d/$BKJS-adhoc
    ;;

  init-service)
    # Install service for a script or bkjs service
    find_user
    echo "Init service $BKJS with $BKJS_BIN"
    case $OS_TYPE in
      alpine)
        conf=/etc/init.d/$BKJS
        $ECHO "#!/sbin/openrc-run\nname=\"$BKJS\"" > $conf
        $ECHO "depend() {\n\tneed logger\n}" >> $conf
        $ECHO "start() {\n\t$BKJS_BIN check-server\n}" >> $conf
        chmod 755 $conf
        ;;

      *)
        ln -sfn $path /etc/init.d/$BKJS
        if [ -d /etc/systemd ]; then
            conf=/etc/systemd/system/$BKJS-check.service
            echo '[Unit]' > $conf
            echo 'Description=Backendjs system check on startup' >> $conf
            echo 'Before=monit.service' >> $conf
            echo 'After=network-online.target' >> $conf
            echo '[Service]' >> $conf
            echo "ExecStart=$BKJS_BIN check-server" >> $conf
            echo 'Type=oneshot' >> $conf
            echo '[Install]' >> $conf
            echo 'WantedBy=multi-user.target' >> $conf
            systemctl enable $BKJS-check
            chkconfig $BKJS off
        else
            chkconfig $BKJS on
        fi
        ;;
    esac
    server=$(get_arg -server)
    if [ "$server" != "" ]; then
        echo "BKJS_SERVER=$server" > /tmp/profile
        grep -vs BKJS_SERVER $BKJS_HOME/etc/profile >> /tmp/profile
        mv /tmp/profile $BKJS_HOME/etc
        chown $BKJS_USER $BKJS_HOME/etc/profile
    fi
    # Execute a command if given
    cmd=$(get_arg -cmd)
    [ "$cmd" != "" ] && service $BKJS $cmd
    exit
    ;;

  stop-service)
    echo "Stopping service $BKJS"
    case $OS_TYPE in
      alpine)
        rc-update del $BKJS
        ;;

      *)
        chkconfig $BKJS off
        if [ -d /etc/systemd ]; then
            systemctl disable $BKJS-check
        fi
        ;;
    esac
    $0 stop
    exit
    ;;

  init-mfa)
    [ "$(whoami)" != "root" ] && echo "Run as root please" && exit 1
    case "$OS_TYPE" in
      alpine)
        apk add google-authenticator openssh-server-pam
        $ECHO "account include base-account" > /etc/pam.d/sshd
        $ECHO "auth required pam_env.so" >> /etc/pam.d/sshd
        $ECHO "auth required pam_nologin.so successok" >> /etc/pam.d/sshd
        $ECHO "auth required /lib/security/pam_google_authenticator.so echo_verification_code grace_period=57600 nullok" >> /etc/pam.d/sshd
        $ECHO "auth required pam_unix.so\tmd5 sha512" >> /etc/pam.d/sshd
        ln /etc/pam.d/sshd /etc/pam.d/sshd.pam
        $0 init-limits
        ;;

      *)
        yum install google-authenticator –y
        if [ "$(egrep -s 'pam_google_authenticator' /etc/pam.d/sshd)" = "" ]; then
            sed -i -r 's|^auth[ \t]+substack[ \t]+password-auth|auth required pam_google_authenticator.so\n#auth substack password-auth|' /etc/pam.d/sshd
        fi
        if [ "$(egrep -s 'pam_google_authenticator' /etc/pam.d/system-auth)" = "" ]; then
            sed -i -r 's|^auth[ \t]+sufficient[ \t]+pam_unix.so nullok try_first_pass|auth requisite pam_unix.so nullok try_first_pass\nauth sufficient pam_google_authenticator.so|' /etc/pam.d/system-auth
        fi
        ;;
    esac
    echo >> /etc/ssh/sshd_config
    if [ "$(egrep -s '^UsePAM yes' /etc/ssh/sshd_config)" = "" ]; then
        sed -i -r 's|^UsePAM|#UsePAM|' /etc/ssh/sshd_config
        echo 'UsePAM yes' >> /etc/ssh/sshd_config
    fi
    if [ "$(egrep -s '^ChallengeResponseAuthentication yes' /etc/ssh/sshd_config)" = "" ]; then
        sed -i -r 's|^ChallengeResponseAuthentication|#ChallengeResponseAuthentication|' /etc/ssh/sshd_config
        echo 'ChallengeResponseAuthentication yes' >> /etc/ssh/sshd_config
    fi
    if [ "$(egrep -s '^AuthenticationMethods publickey,keyboard-interactive' /etc/ssh/sshd_config)" = "" ]; then
        sed -i -r 's|^AuthenticationMethods|#AuthenticationMethods|' /etc/ssh/sshd_config
        echo 'AuthenticationMethods publickey,keyboard-interactive' >> /etc/ssh/sshd_config
    fi
    su $(get_arg -user ec2-user) -c "google-authenticator -d -t -f -r 2 -R 30"
    exit
    ;;

  init-logwatcher)
    find_user
    cron=$(get_arg -cron "*/$(get_arg -interval 5) * * * *")
    echo 'MAILTO=""' > /etc/cron.d/$BKJS-logwatcher
    echo "$cron $BKJS_USER $BKJS_BIN logwatcher" >> /etc/cron.d/$BKJS-logwatcher
    exit
    ;;

  install-packages)
    # Install required development and runtime packages
    packages="bash git nano rsync rsyslog socat monit mc make gcc cmake autoconf automake libtool"

    # Linux distro specific actions
    case "$OS_TYPE" in
      alpine)
        packages="$packages nodejs npm man-pages monit-openrc rsyslog-openrc shadow doas"
        packages="$packages g++ python3 libpng-dev"
        ver=$(cat /etc/alpine-release|cut -d. -f1,2)
        $SED "s/^# *(.+v$ver\/community)\$/\1/" /etc/apk/repositories
        apk update
        apk add $packages
        ;;

      amazon)
        packages="$packages gcc-c++ libuuid-devel openssl-devel libxml2-devel openldap-devel readline-devel libpng-devel libjpeg-turbo-devel"
        packages="$packages ntp man telnet"
        amazon-linux-extras install epel -y
        yum -y -q clean metadata
        yum -y -q install epel-release
        sleep 5
        yum -y -q update
        sleep 5
        yum -y -q install $packages
        ;;

      ubuntu)
        packages="$packages ntp man telnet"
        apt install build-essential $packages
        ;;
    esac
    exit
    ;;

  install-ec2)
    $0 init-server -user ec2-user -home /home/ec2-user -prefix /home/ec2-user $(get_all_args "-user -home -prefix")
    $0 check-server $(get_all_args)
    exit
    ;;

  help)
    echo ""
    echo "Instance setup commands:"
    echo ""
    echo "  init-server [-user USER] [-home HOME] [-prefix $PREFIX] [-doman DOMAIN] [-host HOST] - initialize the backend environment, setup the Linux server with packages and change system config files for production use (AmazonAMI, Alpoine, Ubuntu)"
    echo "  init-hostname [-host HOST] [-domain DOMAIN] - set the hostname"
    echo "  init-user [-user NAME] - create a new user for the backend"
    echo "  init-ssh - setup SSH permissions, allow only public key auth"
    echo "  init-logrotate - setup logrotate for the backend log files"
    echo "  init-rsyslog - setup rsyslog to use for the backend logging, access log and backend log"
    echo "  init-system - setup system wide parameters, permissions"
    echo "  init-limits - setup ulimits"
    echo "  init-sysctl - setup sysctl parameters"
    echo "  init-postfix - [-domain DOMAIN] install and configure postfix for the domain"
    echo "  init-dns - install and setup dnsmasq for local cahching DNS server"
    echo "  init-adhoc - configure for running temporary ad-hoc instances"
    echo "  init-home - setup backend home with required folders"
    echo "  init-mfa [-user ec2-user] - initialize EC2 instance with multi-factor authentication using Google authenticator"
    echo "  init-logwatcher [-interval MINS] [-cron CRON] - creates a crontab file in /etc/cron.d to periodically run the log watcher, -cron can specify full cron time spec"
    echo "  init-service [-server NAME] - create a service to be run bkjs check-server on server startup"
    echo "  stop-service - stop $BKJS service from starting on startup and from monit"
    echo "  install-ec2 - setup server on EC2 instance in the ec2-user home"
    echo "  install-packages - install required packages and updates"
    ;;
esac

