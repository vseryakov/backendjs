#!/bin/bash
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#

case "$BKJS_CMD" in

  help|monit-help)
    echo ""
    echo "  monit-init-system - setup system monitoring with monit, CPU, disk"
    echo "  monit-init-bkjs - setup monit to keep bkjs service running without using any other services and monitor"
    echo "  monit-init-alerts - setup monit mail alerts"
    echo "  monit-init -name NAME [-gid G] [-timeout 30] [-cycles N] -start SCRIPT -stop SCRIPT - generate a monit service config"
    ;;

  monit-init-system)
    interval=$(get_arg -interval 15)
    delay=$(get_arg -delay 0)
    load=$(get_arg -load 7)
    space=$(get_arg -space 90)
    path=$(get_arg -path /)
    mkdir -p /etc/monit.d
    if [ -z "$(egrep -Es '^include /etc/monit.d' /etc/monitrc)" ]; then
        echo 'include /etc/monit.d/*' >> /etc/monitrc
    fi
    echo "set logfile syslog" > /etc/monit.d/system.conf
    echo "set daemon $interval with start delay $delay" > /etc/monit.d/system.conf
    echo "check system \$HOST every 5 cycles if loadavg(1min) > $load for 25 cycles then alert" >> /etc/monit.d/system.conf
    echo "check filesystem rootfs with path $path every 35 cycles if space usage > ${space}% then alert" >> /etc/monit.d/system.conf
    exit
    ;;

  monit-start-instance)
    file=~/.monit.uptime
    uptime=$(stat -c %Z /proc/1/cmdline)
    [ -f $file -a "$(cat $file)" = "$uptime" ] && exit
    echo $uptime > $file
    run_bkjs_cmd start-hook
    exit
    ;;

  monit-init-start-instance)
    bin=$(get_arg -bin $BKJS_BIN)
    mkdir -p /etc/monit.d
    echo -e "check program start-instance with path \"$bin monit-start-instance\" if status > -1 then unmonitor" > /etc/monit.d/start-instance.conf
    exit
    ;;

  monit-init-bkjs)
    timeout=$(get_arg -timeout 30)
    bin=$(get_arg -bin $BKJS_BIN)
    echo -e "check process bkjs with pidfile \"$BKJS_HOME/var/master.pid\" start program = \"$bin run-master $(get_all_args)\" as uid $BKJS_USER with timeout $timeout seconds stop program = \"$bin stop\"" > /etc/monit.d/bkjs.conf
    exit
    ;;

  monit-init-alerts)
    [ -n "$(get_flag -force)" ] && rm -f /etc/monit.d/alert.conf
    [ -f /etc/monit.d/alert.conf ] && exit
    email=$(get_arg -email)
    [ -z "$email" ] && exit
    user=$(get_arg -user)
    host=$(get_arg -host)
    password=$(get_arg -password)
    events=$(get_arg -events "action,connection,data,pid,ppid,exec,content,resource,status,timeout")
    echo "Init monit alert: $email $events, $host, $user"
    [ "$events" != "" ] && events="only on { $events }"
    echo -e "set alert $email $events" > /etc/monit.d/alert.conf
    echo -e "set mail-format { from: $email }" >> /etc/monit.d/alert.conf
    [ -z "$host" ] && exit
    server="set mailserver $host"
    if match $host amazonaws; then server="$server port 465"; fi
    [ -n "$user" ] && server="$server username $user"
    [ -n "$password" ] && server="$server password $password"
    if match $host amazonaws; then server="$server using tlsv12"; fi
    echo -e $server >> /etc/monit.d/alert.conf
    exit
    ;;

  monit-init)
    name=$(get_arg -name)
    start=$(get_arg -start)
    stop=$(get_arg -stop)
    [ "$name" = "" -o "$start" = "" -o "$stop" = "" ] && echo "invalid init-monit arguments" && exit
    timeout=$(get_arg -timeout 30)
    cycles=$(get_arg -cycles)
    [ -n "$cycles" ] && cycles="for $cycles cycles"
    gid=$(get_arg -gid)
    [ -n "$gid" ] && gid="and gid $gid"
    echo -e "check process $name with pidfile \"$BKJS_HOME/var/$name.pid\" start program = \"$start\" as uid $BKJS_USER $gid with timeout $timeout seconds $cycles stop program = \"$stop\"" > /etc/monit.d/$name.conf
    exit
    ;;

esac
